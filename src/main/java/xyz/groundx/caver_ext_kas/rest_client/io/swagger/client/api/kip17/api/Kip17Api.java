/*
 * KIP-17 API
 *   # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1100050 | incorrect request 1100101 | data don't exist 1100251 | its value is out of range; size 1104401 | failed to get an account |   ## 404: Not Found   | Code | Messages |   | --- | --- |   | 1104404 | Token not found |   ## 409: Conflict   | Code | Messages |   | --- | --- |   | 1104400 | Duplicate alias - test |  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.api;

import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiCallback;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiClient;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiException;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ApiResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Configuration;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.Pair;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressRequestBody;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.ApproveAllKip17Request;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.ApproveKip17TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.BurnKip17TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.DeployKip17ContractRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.ErrorResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.GetKip17TokenHistoryResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.GetKip17TokenResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.GetOwnerKip17TokensResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.Kip17ContractInfoResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.Kip17ContractListResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.Kip17TokenListResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.Kip17TransactionStatusResponse;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.MintKip17TokenRequest;
import xyz.groundx.caver_ext_kas.rest_client.io.swagger.client.api.kip17.model.TransferKip17TokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Kip17Api {
    private ApiClient apiClient;

    public Kip17Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Kip17Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for approveAll
     * @param xChainId Klaytn network chain ID, one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call approveAllCall(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/approveall"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveAllValidateBeforeCall(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling approveAll(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling approveAll(Async)");
        }
        
        com.squareup.okhttp.Call call = approveAllCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve All Token Transfers
     * Approves an EOA, &#x60;to&#x60;, to perform token operations on all token of a contract which &#x60;from&#x60; owns.<p></p>  
     * @param xChainId Klaytn network chain ID, one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param body  (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse approveAll(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = approveAllWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Approve All Token Transfers
     * Approves an EOA, &#x60;to&#x60;, to perform token operations on all token of a contract which &#x60;from&#x60; owns.<p></p>  
     * @param xChainId Klaytn network chain ID, one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> approveAllWithHttpInfo(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body) throws ApiException {
        com.squareup.okhttp.Call call = approveAllValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve All Token Transfers (asynchronously)
     * Approves an EOA, &#x60;to&#x60;, to perform token operations on all token of a contract which &#x60;from&#x60; owns.<p></p>  
     * @param xChainId Klaytn network chain ID, one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveAllAsync(String xChainId, String contractAddressOrAlias, ApproveAllKip17Request body, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveAllValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for approveToken
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID to approve the 3rd party to transfer (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call approveTokenCall(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/approve/{token-id}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call approveTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling approveToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling approveToken(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling approveToken(Async)");
        }
        
        com.squareup.okhttp.Call call = approveTokenCall(xChainId, contractAddressOrAlias, tokenId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve Token Transfer
     * Approves an EOA, &#x60;to&#x60;, to perform token operations on a particular token of a contract which &#x60;from&#x60; owns. If &#x60;from&#x60; is not the owner, then the transaction submitted from this API will be reverted.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID to approve the 3rd party to transfer (required)
     * @param body  (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse approveToken(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = approveTokenWithHttpInfo(xChainId, contractAddressOrAlias, tokenId, body);
        return resp.getData();
    }

    /**
     * Approve Token Transfer
     * Approves an EOA, &#x60;to&#x60;, to perform token operations on a particular token of a contract which &#x60;from&#x60; owns. If &#x60;from&#x60; is not the owner, then the transaction submitted from this API will be reverted.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID to approve the 3rd party to transfer (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> approveTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = approveTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve Token Transfer (asynchronously)
     * Approves an EOA, &#x60;to&#x60;, to perform token operations on a particular token of a contract which &#x60;from&#x60; owns. If &#x60;from&#x60; is not the owner, then the transaction submitted from this API will be reverted.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID to approve the 3rd party to transfer (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call approveTokenAsync(String xChainId, String contractAddressOrAlias, String tokenId, ApproveKip17TokenRequest body, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = approveTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for burnToken
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address or unique alias (required)
     * @param tokenId Token ID to burn (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call burnTokenCall(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token/{token-id}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call burnTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling burnToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling burnToken(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling burnToken(Async)");
        }
        
        com.squareup.okhttp.Call call = burnTokenCall(xChainId, contractAddressOrAlias, tokenId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Burn a KIP-17 Token
     * Burns a token. If &#x60;from&#x60; is not the owner or has been approved for this operation, then the transaction submitted from this API will be reverted.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address or unique alias (required)
     * @param tokenId Token ID to burn (required)
     * @param body  (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse burnToken(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = burnTokenWithHttpInfo(xChainId, contractAddressOrAlias, tokenId, body);
        return resp.getData();
    }

    /**
     * Burn a KIP-17 Token
     * Burns a token. If &#x60;from&#x60; is not the owner or has been approved for this operation, then the transaction submitted from this API will be reverted.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address or unique alias (required)
     * @param tokenId Token ID to burn (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> burnTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = burnTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Burn a KIP-17 Token (asynchronously)
     * Burns a token. If &#x60;from&#x60; is not the owner or has been approved for this operation, then the transaction submitted from this API will be reverted.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address or unique alias (required)
     * @param tokenId Token ID to burn (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call burnTokenAsync(String xChainId, String contractAddressOrAlias, String tokenId, BurnKip17TokenRequest body, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = burnTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deployContract
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployContractCall(String xChainId, DeployKip17ContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployContractValidateBeforeCall(String xChainId, DeployKip17ContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling deployContract(Async)");
        }
        
        com.squareup.okhttp.Call call = deployContractCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deploy New KIP-17 Contract
     * Deploys a new KIP-17 contract with user submitted parameters.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param body  (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse deployContract(String xChainId, DeployKip17ContractRequest body) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = deployContractWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * Deploy New KIP-17 Contract
     * Deploys a new KIP-17 contract with user submitted parameters.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> deployContractWithHttpInfo(String xChainId, DeployKip17ContractRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deployContractValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy New KIP-17 Contract (asynchronously)
     * Deploys a new KIP-17 contract with user submitted parameters.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployContractAsync(String xChainId, DeployKip17ContractRequest body, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployContractValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContract
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractValidateBeforeCall(String xChainId, String contractAddressOrAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getContract(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getContract(Async)");
        }
        
        com.squareup.okhttp.Call call = getContractCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get KIP-17 Contract Information
     * Retrieves KIP-17 contract information by either contract address or alias.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @return Kip17ContractInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17ContractInfoResponse getContract(String xChainId, String contractAddressOrAlias) throws ApiException {
        ApiResponse<Kip17ContractInfoResponse> resp = getContractWithHttpInfo(xChainId, contractAddressOrAlias);
        return resp.getData();
    }

    /**
     * Get KIP-17 Contract Information
     * Retrieves KIP-17 contract information by either contract address or alias.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @return ApiResponse&lt;Kip17ContractInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17ContractInfoResponse> getContractWithHttpInfo(String xChainId, String contractAddressOrAlias) throws ApiException {
        com.squareup.okhttp.Call call = getContractValidateBeforeCall(xChainId, contractAddressOrAlias, null, null);
        Type localVarReturnType = new TypeToken<Kip17ContractInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get KIP-17 Contract Information (asynchronously)
     * Retrieves KIP-17 contract information by either contract address or alias.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContractAsync(String xChainId, String contractAddressOrAlias, final ApiCallback<Kip17ContractInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContractValidateBeforeCall(xChainId, contractAddressOrAlias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17ContractInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOwnerTokens
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param ownerAddress Token owner address (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOwnerTokensCall(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/owner/{owner-address}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "owner-address" + "\\}", apiClient.escapeString(ownerAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOwnerTokensValidateBeforeCall(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getOwnerTokens(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getOwnerTokens(Async)");
        }
        // verify the required parameter 'ownerAddress' is set
        if (ownerAddress == null) {
            throw new ApiException("Missing the required parameter 'ownerAddress' when calling getOwnerTokens(Async)");
        }
        
        com.squareup.okhttp.Call call = getOwnerTokensCall(xChainId, contractAddressOrAlias, ownerAddress, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get List of Tokens Belonging to a Particular Token Owner
     * Lists all tokens of the same owner (&#x60;owner-address&#x60;) of a contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param ownerAddress Token owner address (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @return GetOwnerKip17TokensResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOwnerKip17TokensResponse getOwnerTokens(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor) throws ApiException {
        ApiResponse<GetOwnerKip17TokensResponse> resp = getOwnerTokensWithHttpInfo(xChainId, contractAddressOrAlias, ownerAddress, size, cursor);
        return resp.getData();
    }

    /**
     * Get List of Tokens Belonging to a Particular Token Owner
     * Lists all tokens of the same owner (&#x60;owner-address&#x60;) of a contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param ownerAddress Token owner address (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @return ApiResponse&lt;GetOwnerKip17TokensResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOwnerKip17TokensResponse> getOwnerTokensWithHttpInfo(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getOwnerTokensValidateBeforeCall(xChainId, contractAddressOrAlias, ownerAddress, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<GetOwnerKip17TokensResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get List of Tokens Belonging to a Particular Token Owner (asynchronously)
     * Lists all tokens of the same owner (&#x60;owner-address&#x60;) of a contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param ownerAddress Token owner address (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOwnerTokensAsync(String xChainId, String contractAddressOrAlias, String ownerAddress, Long size, String cursor, final ApiCallback<GetOwnerKip17TokensResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOwnerTokensValidateBeforeCall(xChainId, contractAddressOrAlias, ownerAddress, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOwnerKip17TokensResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getToken
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address or unique alias (required)
     * @param tokenId Token ID to retreive (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTokenCall(String xChainId, String contractAddressOrAlias, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token/{token-id}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getToken(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getToken(Async)");
        }
        
        com.squareup.okhttp.Call call = getTokenCall(xChainId, contractAddressOrAlias, tokenId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Particular Token Info of a KIP-17 Contract
     * Retrieves the requested token information of a parcitular KIP-17 contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address or unique alias (required)
     * @param tokenId Token ID to retreive (required)
     * @return GetKip17TokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetKip17TokenResponse getToken(String xChainId, String contractAddressOrAlias, String tokenId) throws ApiException {
        ApiResponse<GetKip17TokenResponse> resp = getTokenWithHttpInfo(xChainId, contractAddressOrAlias, tokenId);
        return resp.getData();
    }

    /**
     * Get Particular Token Info of a KIP-17 Contract
     * Retrieves the requested token information of a parcitular KIP-17 contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address or unique alias (required)
     * @param tokenId Token ID to retreive (required)
     * @return ApiResponse&lt;GetKip17TokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetKip17TokenResponse> getTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId) throws ApiException {
        com.squareup.okhttp.Call call = getTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, null, null);
        Type localVarReturnType = new TypeToken<GetKip17TokenResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Particular Token Info of a KIP-17 Contract (asynchronously)
     * Retrieves the requested token information of a parcitular KIP-17 contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address or unique alias (required)
     * @param tokenId Token ID to retreive (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTokenAsync(String xChainId, String contractAddressOrAlias, String tokenId, final ApiCallback<GetKip17TokenResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetKip17TokenResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTokenHistory
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTokenHistoryCall(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token/{token-id}/history"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTokenHistoryValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getTokenHistory(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling getTokenHistory(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getTokenHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getTokenHistoryCall(xChainId, contractAddressOrAlias, tokenId, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Token History
     * Lists token transfer histories starting from the time the requested token was minted, where each entry of the response items shows a transfer record.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @return GetKip17TokenHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetKip17TokenHistoryResponse getTokenHistory(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor) throws ApiException {
        ApiResponse<GetKip17TokenHistoryResponse> resp = getTokenHistoryWithHttpInfo(xChainId, contractAddressOrAlias, tokenId, size, cursor);
        return resp.getData();
    }

    /**
     * Get Token History
     * Lists token transfer histories starting from the time the requested token was minted, where each entry of the response items shows a transfer record.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @return ApiResponse&lt;GetKip17TokenHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetKip17TokenHistoryResponse> getTokenHistoryWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getTokenHistoryValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<GetKip17TokenHistoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Token History (asynchronously)
     * Lists token transfer histories starting from the time the requested token was minted, where each entry of the response items shows a transfer record.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTokenHistoryAsync(String xChainId, String contractAddressOrAlias, String tokenId, Long size, String cursor, final ApiCallback<GetKip17TokenHistoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTokenHistoryValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetKip17TokenHistoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listContractsInDeployerPool
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listContractsInDeployerPoolCall(String xChainId, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listContractsInDeployerPoolValidateBeforeCall(String xChainId, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling listContractsInDeployerPool(Async)");
        }
        
        com.squareup.okhttp.Call call = listContractsInDeployerPoolCall(xChainId, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get List of KIP-17 Contracts
     * Lists all contracts deployed in the requested deployer pool. If the pool is not specified, the default pool will be queried.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @return Kip17ContractListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17ContractListResponse listContractsInDeployerPool(String xChainId, Long size, String cursor) throws ApiException {
        ApiResponse<Kip17ContractListResponse> resp = listContractsInDeployerPoolWithHttpInfo(xChainId, size, cursor);
        return resp.getData();
    }

    /**
     * Get List of KIP-17 Contracts
     * Lists all contracts deployed in the requested deployer pool. If the pool is not specified, the default pool will be queried.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @return ApiResponse&lt;Kip17ContractListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17ContractListResponse> listContractsInDeployerPoolWithHttpInfo(String xChainId, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = listContractsInDeployerPoolValidateBeforeCall(xChainId, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<Kip17ContractListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get List of KIP-17 Contracts (asynchronously)
     * Lists all contracts deployed in the requested deployer pool. If the pool is not specified, the default pool will be queried.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listContractsInDeployerPoolAsync(String xChainId, Long size, String cursor, final ApiCallback<Kip17ContractListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listContractsInDeployerPoolValidateBeforeCall(xChainId, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17ContractListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTokens
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTokensCall(String xChainId, String contractAddressOrAlias, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTokensValidateBeforeCall(String xChainId, String contractAddressOrAlias, Long size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling listTokens(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling listTokens(Async)");
        }
        
        com.squareup.okhttp.Call call = listTokensCall(xChainId, contractAddressOrAlias, size, cursor, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get List of Tokens Minted by a KIP-17 Contract
     * Lists all tokens minted from a particular KIP-17 contract. Use contract address or alias to query the contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @return Kip17TokenListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TokenListResponse listTokens(String xChainId, String contractAddressOrAlias, Long size, String cursor) throws ApiException {
        ApiResponse<Kip17TokenListResponse> resp = listTokensWithHttpInfo(xChainId, contractAddressOrAlias, size, cursor);
        return resp.getData();
    }

    /**
     * Get List of Tokens Minted by a KIP-17 Contract
     * Lists all tokens minted from a particular KIP-17 contract. Use contract address or alias to query the contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @return ApiResponse&lt;Kip17TokenListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TokenListResponse> listTokensWithHttpInfo(String xChainId, String contractAddressOrAlias, Long size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = listTokensValidateBeforeCall(xChainId, contractAddressOrAlias, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<Kip17TokenListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get List of Tokens Minted by a KIP-17 Contract (asynchronously)
     * Lists all tokens minted from a particular KIP-17 contract. Use contract address or alias to query the contract.<p></p>  
     * @param xChainId Klaytn network chain ID (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param size Number of items to return (optional)
     * @param cursor Items offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTokensAsync(String xChainId, String contractAddressOrAlias, Long size, String cursor, final ApiCallback<Kip17TokenListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTokensValidateBeforeCall(xChainId, contractAddressOrAlias, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TokenListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mintToken
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mintTokenCall(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mintTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling mintToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling mintToken(Async)");
        }
        
        com.squareup.okhttp.Call call = mintTokenCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Mint a New KIP-17 Token
     * Mints a new token on the requested KIP-17 contract. The target contract can be requested by either contract address or alias.<p></p>  Do not mint a token to an address outside of account pools you control. KIP-17 APIs only allow actions among accounts populated within the KAS account pools that you own.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param body  (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse mintToken(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = mintTokenWithHttpInfo(xChainId, contractAddressOrAlias, body);
        return resp.getData();
    }

    /**
     * Mint a New KIP-17 Token
     * Mints a new token on the requested KIP-17 contract. The target contract can be requested by either contract address or alias.<p></p>  Do not mint a token to an address outside of account pools you control. KIP-17 APIs only allow actions among accounts populated within the KAS account pools that you own.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> mintTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = mintTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mint a New KIP-17 Token (asynchronously)
     * Mints a new token on the requested KIP-17 contract. The target contract can be requested by either contract address or alias.<p></p>  Do not mint a token to an address outside of account pools you control. KIP-17 APIs only allow actions among accounts populated within the KAS account pools that you own.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mintTokenAsync(String xChainId, String contractAddressOrAlias, MintKip17TokenRequest body, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mintTokenValidateBeforeCall(xChainId, contractAddressOrAlias, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferToken
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferTokenCall(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/contract/{contract-address-or-alias}/token/{token-id}"
            .replaceAll("\\{" + "contract-address-or-alias" + "\\}", apiClient.escapeString(contractAddressOrAlias.toString()))
            .replaceAll("\\{" + "token-id" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferTokenValidateBeforeCall(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling transferToken(Async)");
        }
        // verify the required parameter 'contractAddressOrAlias' is set
        if (contractAddressOrAlias == null) {
            throw new ApiException("Missing the required parameter 'contractAddressOrAlias' when calling transferToken(Async)");
        }
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling transferToken(Async)");
        }
        
        com.squareup.okhttp.Call call = transferTokenCall(xChainId, contractAddressOrAlias, tokenId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Transfer a KIP-17 Token
     * Transfers a token. If &#x60;sender&#x60; and &#x60;owner&#x60; are not the same, then &#x60;sender&#x60; must have been approved for this token transfer.<p></p>  Note that this API requires two KRNs, one for the deployer pool and one for the sender. <p></p>  - The first KRN for the deployer pool, which must be formatted as &#x60;krn:*:kip17:*:account-pool:*&#x60; makes sure the API caller has the right to invoke transfer method on the requested contract. Although contracts in Klaytn are publicly available and anyone who knows the address can invoke the contract functions, if the contract owner does not reveal the address, it would be difficult to even find out the address as it requires indirect measures such as observing network communication. To this end, as we do not know whether the address has been publicly advertised or not, KIP-17 API assumes that only the contract owner invokes contract functions.  - The second KRN is for the &#x60;sender&#x60;, and must be formatted as &#x60;krn:*:wallet:*:account-pool:*&#x60;. Currently, KIP-17 API only allows transferring tokens among accounts populated in KAS Wallet account pools. - As all other APIs, leavning &#x60;x-krn&#x60; empty automatically fills the field with default values.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID (required)
     * @param body  (optional)
     * @return Kip17TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Kip17TransactionStatusResponse transferToken(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body) throws ApiException {
        ApiResponse<Kip17TransactionStatusResponse> resp = transferTokenWithHttpInfo(xChainId, contractAddressOrAlias, tokenId, body);
        return resp.getData();
    }

    /**
     * Transfer a KIP-17 Token
     * Transfers a token. If &#x60;sender&#x60; and &#x60;owner&#x60; are not the same, then &#x60;sender&#x60; must have been approved for this token transfer.<p></p>  Note that this API requires two KRNs, one for the deployer pool and one for the sender. <p></p>  - The first KRN for the deployer pool, which must be formatted as &#x60;krn:*:kip17:*:account-pool:*&#x60; makes sure the API caller has the right to invoke transfer method on the requested contract. Although contracts in Klaytn are publicly available and anyone who knows the address can invoke the contract functions, if the contract owner does not reveal the address, it would be difficult to even find out the address as it requires indirect measures such as observing network communication. To this end, as we do not know whether the address has been publicly advertised or not, KIP-17 API assumes that only the contract owner invokes contract functions.  - The second KRN is for the &#x60;sender&#x60;, and must be formatted as &#x60;krn:*:wallet:*:account-pool:*&#x60;. Currently, KIP-17 API only allows transferring tokens among accounts populated in KAS Wallet account pools. - As all other APIs, leavning &#x60;x-krn&#x60; empty automatically fills the field with default values.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Kip17TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Kip17TransactionStatusResponse> transferTokenWithHttpInfo(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = transferTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, null, null);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Transfer a KIP-17 Token (asynchronously)
     * Transfers a token. If &#x60;sender&#x60; and &#x60;owner&#x60; are not the same, then &#x60;sender&#x60; must have been approved for this token transfer.<p></p>  Note that this API requires two KRNs, one for the deployer pool and one for the sender. <p></p>  - The first KRN for the deployer pool, which must be formatted as &#x60;krn:*:kip17:*:account-pool:*&#x60; makes sure the API caller has the right to invoke transfer method on the requested contract. Although contracts in Klaytn are publicly available and anyone who knows the address can invoke the contract functions, if the contract owner does not reveal the address, it would be difficult to even find out the address as it requires indirect measures such as observing network communication. To this end, as we do not know whether the address has been publicly advertised or not, KIP-17 API assumes that only the contract owner invokes contract functions.  - The second KRN is for the &#x60;sender&#x60;, and must be formatted as &#x60;krn:*:wallet:*:account-pool:*&#x60;. Currently, KIP-17 API only allows transferring tokens among accounts populated in KAS Wallet account pools. - As all other APIs, leavning &#x60;x-krn&#x60; empty automatically fills the field with default values.<p></p>  
     * @param xChainId Klaytn network chain ID; one of [1001, 8217] (required)
     * @param contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias (required)
     * @param tokenId Token ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferTokenAsync(String xChainId, String contractAddressOrAlias, String tokenId, TransferKip17TokenRequest body, final ApiCallback<Kip17TransactionStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferTokenValidateBeforeCall(xChainId, contractAddressOrAlias, tokenId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Kip17TransactionStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
