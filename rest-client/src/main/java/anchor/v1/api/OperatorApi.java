/*
 * Anchor API
 * Anchor API - **TODO** : define error type with Klaytn cell 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: luffy.choi@groundx.xyz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package anchor.v1.api;

import anchor.v1.*;
import anchor.v1.model.M1OperatorRequest;
import anchor.v1.model.M1OperatorResponse;
import anchor.v1.model.M1OperatorResponse1;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperatorApi {
    private ApiClient apiClient;

    public OperatorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperatorApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for generateOperator
     * @param xKrn operator pool krn. if client want to use feepayer, feepayer krn is also need (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateOperatorCall(String xKrn, M1OperatorRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/m1/operator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateOperatorValidateBeforeCall(String xKrn, M1OperatorRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling generateOperator(Async)");
        }
        

        com.squareup.okhttp.Call call = generateOperatorCall(xKrn, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * generateOperator
     * 블록체인 데이터 앵커링을 위한 operator를 생성합니다.  ## 파라미터 설명 3개 파라미터 모두 설정되어 있지 않은 경우엔 에러 반환 | 파라미터 | 설명 | | - | - | | use_operator | 기본적으로 Operator를 사용할 건지 여부 | | use_global_feepayer | 기본적으로 Global feepayer를 사용할 건지 여부 | | feepayer | 자체 fee payer 주소; 자체 대납 사용시에만 설정 |  ## 파라미터 설정별 대납 우선 순위 최종적으로 &#x60;global feepayer&#x60;를 사용하는 경우에만 anchor가 보장됩니다.  | 우선순위 | 파라미터 | 대납주체 | | - | - | - | | 1 | &#x60;feepayer&#x60; | 자체 fee payer | | 2 | &#x60;use_operator&#x60; | operator | | 3 | &#x60;use_global_feepayer&#x60; | global fee payer (anchor 보장) |  ## 파라미터 설정별 동작  | use_global_feepayer | feepayer | use_operator | 우선순위 | | - | - | - | - | | false | X | false | Operator 설정 에러 발생 | | true | X | false | &#x60;global feepayer&#x60; | | false | X | true | &#x60;operator&#x60; | | true | X | true | &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | false | O | false | &#x60;feepayer&#x60; | | false | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; | | true | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | true | O | false | &#x60;feepayer&#x60; &gt; &#x60;global feepayer&#x60; | 
     * @param xKrn operator pool krn. if client want to use feepayer, feepayer krn is also need (required)
     * @param body  (optional)
     * @return M1OperatorResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public M1OperatorResponse1 generateOperator(String xKrn, M1OperatorRequest body) throws ApiException {
        ApiResponse<M1OperatorResponse1> resp = generateOperatorWithHttpInfo(xKrn, body);
        return resp.getData();
    }

    /**
     * generateOperator
     * 블록체인 데이터 앵커링을 위한 operator를 생성합니다.  ## 파라미터 설명 3개 파라미터 모두 설정되어 있지 않은 경우엔 에러 반환 | 파라미터 | 설명 | | - | - | | use_operator | 기본적으로 Operator를 사용할 건지 여부 | | use_global_feepayer | 기본적으로 Global feepayer를 사용할 건지 여부 | | feepayer | 자체 fee payer 주소; 자체 대납 사용시에만 설정 |  ## 파라미터 설정별 대납 우선 순위 최종적으로 &#x60;global feepayer&#x60;를 사용하는 경우에만 anchor가 보장됩니다.  | 우선순위 | 파라미터 | 대납주체 | | - | - | - | | 1 | &#x60;feepayer&#x60; | 자체 fee payer | | 2 | &#x60;use_operator&#x60; | operator | | 3 | &#x60;use_global_feepayer&#x60; | global fee payer (anchor 보장) |  ## 파라미터 설정별 동작  | use_global_feepayer | feepayer | use_operator | 우선순위 | | - | - | - | - | | false | X | false | Operator 설정 에러 발생 | | true | X | false | &#x60;global feepayer&#x60; | | false | X | true | &#x60;operator&#x60; | | true | X | true | &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | false | O | false | &#x60;feepayer&#x60; | | false | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; | | true | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | true | O | false | &#x60;feepayer&#x60; &gt; &#x60;global feepayer&#x60; | 
     * @param xKrn operator pool krn. if client want to use feepayer, feepayer krn is also need (required)
     * @param body  (optional)
     * @return ApiResponse&lt;M1OperatorResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<M1OperatorResponse1> generateOperatorWithHttpInfo(String xKrn, M1OperatorRequest body) throws ApiException {
        com.squareup.okhttp.Call call = generateOperatorValidateBeforeCall(xKrn, body, null, null);
        Type localVarReturnType = new TypeToken<M1OperatorResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * generateOperator (asynchronously)
     * 블록체인 데이터 앵커링을 위한 operator를 생성합니다.  ## 파라미터 설명 3개 파라미터 모두 설정되어 있지 않은 경우엔 에러 반환 | 파라미터 | 설명 | | - | - | | use_operator | 기본적으로 Operator를 사용할 건지 여부 | | use_global_feepayer | 기본적으로 Global feepayer를 사용할 건지 여부 | | feepayer | 자체 fee payer 주소; 자체 대납 사용시에만 설정 |  ## 파라미터 설정별 대납 우선 순위 최종적으로 &#x60;global feepayer&#x60;를 사용하는 경우에만 anchor가 보장됩니다.  | 우선순위 | 파라미터 | 대납주체 | | - | - | - | | 1 | &#x60;feepayer&#x60; | 자체 fee payer | | 2 | &#x60;use_operator&#x60; | operator | | 3 | &#x60;use_global_feepayer&#x60; | global fee payer (anchor 보장) |  ## 파라미터 설정별 동작  | use_global_feepayer | feepayer | use_operator | 우선순위 | | - | - | - | - | | false | X | false | Operator 설정 에러 발생 | | true | X | false | &#x60;global feepayer&#x60; | | false | X | true | &#x60;operator&#x60; | | true | X | true | &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | false | O | false | &#x60;feepayer&#x60; | | false | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; | | true | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | true | O | false | &#x60;feepayer&#x60; &gt; &#x60;global feepayer&#x60; | 
     * @param xKrn operator pool krn. if client want to use feepayer, feepayer krn is also need (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateOperatorAsync(String xKrn, M1OperatorRequest body, final ApiCallback<M1OperatorResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateOperatorValidateBeforeCall(xKrn, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<M1OperatorResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveregisteredservicechainoperator
     * @param xKrn operator pool krn (required)
     * @param operatorId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveregisteredservicechainoperatorCall(String xKrn, String operatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/m1/operator/{operator_id}"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveregisteredservicechainoperatorValidateBeforeCall(String xKrn, String operatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling retrieveregisteredservicechainoperator(Async)");
        }
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling retrieveregisteredservicechainoperator(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveregisteredservicechainoperatorCall(xKrn, operatorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve registered service chain operator
     * Retrieve registered service chain operator
     * @param xKrn operator pool krn (required)
     * @param operatorId  (required)
     * @return M1OperatorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public M1OperatorResponse retrieveregisteredservicechainoperator(String xKrn, String operatorId) throws ApiException {
        ApiResponse<M1OperatorResponse> resp = retrieveregisteredservicechainoperatorWithHttpInfo(xKrn, operatorId);
        return resp.getData();
    }

    /**
     * Retrieve registered service chain operator
     * Retrieve registered service chain operator
     * @param xKrn operator pool krn (required)
     * @param operatorId  (required)
     * @return ApiResponse&lt;M1OperatorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<M1OperatorResponse> retrieveregisteredservicechainoperatorWithHttpInfo(String xKrn, String operatorId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveregisteredservicechainoperatorValidateBeforeCall(xKrn, operatorId, null, null);
        Type localVarReturnType = new TypeToken<M1OperatorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve registered service chain operator (asynchronously)
     * Retrieve registered service chain operator
     * @param xKrn operator pool krn (required)
     * @param operatorId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveregisteredservicechainoperatorAsync(String xKrn, String operatorId, final ApiCallback<M1OperatorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveregisteredservicechainoperatorValidateBeforeCall(xKrn, operatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<M1OperatorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveregisteredservicechains
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveregisteredservicechainsCall(String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/m1/operator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from-date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to-date", toDate));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveregisteredservicechainsValidateBeforeCall(String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling retrieveregisteredservicechains(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveregisteredservicechainsCall(xKrn, size, fromDate, toDate, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve registered service chains
     * Retrieve registered service chains
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @return M1OperatorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public M1OperatorResponse retrieveregisteredservicechains(String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor) throws ApiException {
        ApiResponse<M1OperatorResponse> resp = retrieveregisteredservicechainsWithHttpInfo(xKrn, size, fromDate, toDate, cursor);
        return resp.getData();
    }

    /**
     * Retrieve registered service chains
     * Retrieve registered service chains
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @return ApiResponse&lt;M1OperatorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<M1OperatorResponse> retrieveregisteredservicechainsWithHttpInfo(String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = retrieveregisteredservicechainsValidateBeforeCall(xKrn, size, fromDate, toDate, cursor, null, null);
        Type localVarReturnType = new TypeToken<M1OperatorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve registered service chains (asynchronously)
     * Retrieve registered service chains
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveregisteredservicechainsAsync(String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ApiCallback<M1OperatorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveregisteredservicechainsValidateBeforeCall(xKrn, size, fromDate, toDate, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<M1OperatorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOperator
     * @param operatorId  (required)
     * @param xKrn operator pool krn. if client want to use feepayer, feepayer krn is also need (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOperatorCall(String operatorId, String xKrn, M1OperatorRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/m1/operator/{operator_id}"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOperatorValidateBeforeCall(String operatorId, String xKrn, M1OperatorRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling updateOperator(Async)");
        }
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling updateOperator(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOperatorCall(operatorId, xKrn, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * updateOperator
     * 블록체인 데이터 앵커링을 위한 operator를 생성합니다.  ## 파라미터 설명 3개 파라미터 모두 설정되어 있지 않은 경우엔 에러 반환 | 파라미터 | 설명 | | - | - | | use_operator | 기본적으로 Operator를 사용할 건지 여부 | | use_global_feepayer | 기본적으로 Global feepayer를 사용할 건지 여부 | | feepayer | 자체 fee payer 주소; 자체 대납 사용시에만 설정 |  ## 파라미터 설정별 대납 우선 순위 최종적으로 &#x60;global feepayer&#x60;를 사용하는 경우에만 anchor가 보장됩니다.  | 우선순위 | 파라미터 | 대납주체 | | - | - | - | | 1 | &#x60;feepayer&#x60; | 자체 fee payer | | 2 | &#x60;use_operator&#x60; | operator | | 3 | &#x60;use_global_feepayer&#x60; | global fee payer (anchor 보장) |  ## 파라미터 설정별 동작  | use_global_feepayer | feepayer | use_operator | 우선순위 | | - | - | - | - | | false | X | false | Operator 설정 에러 발생 | | true | X | false | &#x60;global feepayer&#x60; | | false | X | true | &#x60;operator&#x60; | | true | X | true | &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | false | O | false | &#x60;feepayer&#x60; | | false | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; | | true | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | true | O | false | &#x60;feepayer&#x60; &gt; &#x60;global feepayer&#x60; | 
     * @param operatorId  (required)
     * @param xKrn operator pool krn. if client want to use feepayer, feepayer krn is also need (required)
     * @param body  (optional)
     * @return M1OperatorResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public M1OperatorResponse1 updateOperator(String operatorId, String xKrn, M1OperatorRequest body) throws ApiException {
        ApiResponse<M1OperatorResponse1> resp = updateOperatorWithHttpInfo(operatorId, xKrn, body);
        return resp.getData();
    }

    /**
     * updateOperator
     * 블록체인 데이터 앵커링을 위한 operator를 생성합니다.  ## 파라미터 설명 3개 파라미터 모두 설정되어 있지 않은 경우엔 에러 반환 | 파라미터 | 설명 | | - | - | | use_operator | 기본적으로 Operator를 사용할 건지 여부 | | use_global_feepayer | 기본적으로 Global feepayer를 사용할 건지 여부 | | feepayer | 자체 fee payer 주소; 자체 대납 사용시에만 설정 |  ## 파라미터 설정별 대납 우선 순위 최종적으로 &#x60;global feepayer&#x60;를 사용하는 경우에만 anchor가 보장됩니다.  | 우선순위 | 파라미터 | 대납주체 | | - | - | - | | 1 | &#x60;feepayer&#x60; | 자체 fee payer | | 2 | &#x60;use_operator&#x60; | operator | | 3 | &#x60;use_global_feepayer&#x60; | global fee payer (anchor 보장) |  ## 파라미터 설정별 동작  | use_global_feepayer | feepayer | use_operator | 우선순위 | | - | - | - | - | | false | X | false | Operator 설정 에러 발생 | | true | X | false | &#x60;global feepayer&#x60; | | false | X | true | &#x60;operator&#x60; | | true | X | true | &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | false | O | false | &#x60;feepayer&#x60; | | false | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; | | true | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | true | O | false | &#x60;feepayer&#x60; &gt; &#x60;global feepayer&#x60; | 
     * @param operatorId  (required)
     * @param xKrn operator pool krn. if client want to use feepayer, feepayer krn is also need (required)
     * @param body  (optional)
     * @return ApiResponse&lt;M1OperatorResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<M1OperatorResponse1> updateOperatorWithHttpInfo(String operatorId, String xKrn, M1OperatorRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateOperatorValidateBeforeCall(operatorId, xKrn, body, null, null);
        Type localVarReturnType = new TypeToken<M1OperatorResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateOperator (asynchronously)
     * 블록체인 데이터 앵커링을 위한 operator를 생성합니다.  ## 파라미터 설명 3개 파라미터 모두 설정되어 있지 않은 경우엔 에러 반환 | 파라미터 | 설명 | | - | - | | use_operator | 기본적으로 Operator를 사용할 건지 여부 | | use_global_feepayer | 기본적으로 Global feepayer를 사용할 건지 여부 | | feepayer | 자체 fee payer 주소; 자체 대납 사용시에만 설정 |  ## 파라미터 설정별 대납 우선 순위 최종적으로 &#x60;global feepayer&#x60;를 사용하는 경우에만 anchor가 보장됩니다.  | 우선순위 | 파라미터 | 대납주체 | | - | - | - | | 1 | &#x60;feepayer&#x60; | 자체 fee payer | | 2 | &#x60;use_operator&#x60; | operator | | 3 | &#x60;use_global_feepayer&#x60; | global fee payer (anchor 보장) |  ## 파라미터 설정별 동작  | use_global_feepayer | feepayer | use_operator | 우선순위 | | - | - | - | - | | false | X | false | Operator 설정 에러 발생 | | true | X | false | &#x60;global feepayer&#x60; | | false | X | true | &#x60;operator&#x60; | | true | X | true | &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | false | O | false | &#x60;feepayer&#x60; | | false | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; | | true | O | true | &#x60;feepayer&#x60; &gt; &#x60;operator&#x60; &gt; &#x60;global feepayer&#x60; | | true | O | false | &#x60;feepayer&#x60; &gt; &#x60;global feepayer&#x60; | 
     * @param operatorId  (required)
     * @param xKrn operator pool krn. if client want to use feepayer, feepayer krn is also need (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOperatorAsync(String operatorId, String xKrn, M1OperatorRequest body, final ApiCallback<M1OperatorResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOperatorValidateBeforeCall(operatorId, xKrn, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<M1OperatorResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
