/*
 * Anchor API
 * Anchor API - **TODO** : define error type with Klaytn cell 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: luffy.choi@groundx.xyz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package anchor.v1.api;


import anchor.v1.*;
import anchor.v1.model.*;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.lang.String;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnchorApi {
    private ApiClient apiClient;

    public AnchorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnchorApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for anchorBlock
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param body chain data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call anchorBlockCall(String authorization, String xKrn, V1AnchorRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/anchor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        //TODO : This is only used for test
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(1001));

        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call anchorBlockValidateBeforeCall(String authorization, String xKrn, V1AnchorRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling anchorBlock(Async)");
        }
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling anchorBlock(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling anchorBlock(Async)");
        }
        

        com.squareup.okhttp.Call call = anchorBlockCall(authorization, xKrn, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * anchorBlock
     * 블록체인 데이터를 앵커링 하기 위해서 사용할 수 있습니다. &#x60;payload&#x60;의 데이터는 자유롭게 구성될 수 있지만, &#x60;payload.id&#x60; 필드를 설정할 경우 해당 필드를 통해서 조회가 가능합니다. &#x60;payload.id&#x60;를 설정하지 않는 경우에는 기본적으로 &#x60;payload.id &#x3D; SHA256(payload)&#x60;로 설정됩니다.  이때, 해당 operator의 Anchor 트랜잭션은 식별가능한 &#x60;payload.id&#x60;를 가지게 됩니다.  다시 말해서, 동일한 &#x60;payload.id&#x60;가 존재하는 경우에는 anchor가 정상적으로 수행되지 않습니다.  | Code | Description | | - | - | | 0 | 정상적으로 성공 | | 1000 | 알려지지 않은 에러 | | 2101 | Payload ID 중복 에러 |  | 2102 | 설정된 모든 계정의 밸런스 부족 | 
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param body chain data (required)
     * @return V1AnchorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1AnchorResponse anchorBlock(String authorization, String xKrn, V1AnchorRequest body) throws ApiException {
        ApiResponse<V1AnchorResponse> resp = anchorBlockWithHttpInfo(authorization, xKrn, body);
        return resp.getData();
    }

    /**
     * anchorBlock
     * 블록체인 데이터를 앵커링 하기 위해서 사용할 수 있습니다. &#x60;payload&#x60;의 데이터는 자유롭게 구성될 수 있지만, &#x60;payload.id&#x60; 필드를 설정할 경우 해당 필드를 통해서 조회가 가능합니다. &#x60;payload.id&#x60;를 설정하지 않는 경우에는 기본적으로 &#x60;payload.id &#x3D; SHA256(payload)&#x60;로 설정됩니다.  이때, 해당 operator의 Anchor 트랜잭션은 식별가능한 &#x60;payload.id&#x60;를 가지게 됩니다.  다시 말해서, 동일한 &#x60;payload.id&#x60;가 존재하는 경우에는 anchor가 정상적으로 수행되지 않습니다.  | Code | Description | | - | - | | 0 | 정상적으로 성공 | | 1000 | 알려지지 않은 에러 | | 2101 | Payload ID 중복 에러 |  | 2102 | 설정된 모든 계정의 밸런스 부족 | 
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param body chain data (required)
     * @return ApiResponse&lt;V1AnchorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1AnchorResponse> anchorBlockWithHttpInfo(String authorization, String xKrn, V1AnchorRequest body) throws ApiException {
        com.squareup.okhttp.Call call = anchorBlockValidateBeforeCall(authorization, xKrn, body, null, null);
        Type localVarReturnType = new TypeToken<V1AnchorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * anchorBlock (asynchronously)
     * 블록체인 데이터를 앵커링 하기 위해서 사용할 수 있습니다. &#x60;payload&#x60;의 데이터는 자유롭게 구성될 수 있지만, &#x60;payload.id&#x60; 필드를 설정할 경우 해당 필드를 통해서 조회가 가능합니다. &#x60;payload.id&#x60;를 설정하지 않는 경우에는 기본적으로 &#x60;payload.id &#x3D; SHA256(payload)&#x60;로 설정됩니다.  이때, 해당 operator의 Anchor 트랜잭션은 식별가능한 &#x60;payload.id&#x60;를 가지게 됩니다.  다시 말해서, 동일한 &#x60;payload.id&#x60;가 존재하는 경우에는 anchor가 정상적으로 수행되지 않습니다.  | Code | Description | | - | - | | 0 | 정상적으로 성공 | | 1000 | 알려지지 않은 에러 | | 2101 | Payload ID 중복 에러 |  | 2102 | 설정된 모든 계정의 밸런스 부족 | 
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param body chain data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call anchorBlockAsync(String authorization, String xKrn, V1AnchorRequest body, final ApiCallback<V1AnchorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = anchorBlockValidateBeforeCall(authorization, xKrn, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1AnchorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRetrieveanchoredtransaction
     * @param operatorId  (required)
     * @param payloadId  (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRetrieveanchoredtransactionCall(String operatorId, String payloadId, String authorization, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operator/{operator_id}/payload/{payload_id}"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()))
            .replaceAll("\\{" + "payload_id" + "\\}", apiClient.escapeString(payloadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRetrieveanchoredtransactionValidateBeforeCall(String operatorId, String payloadId, String authorization, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling getRetrieveanchoredtransaction(Async)");
        }
        
        // verify the required parameter 'payloadId' is set
        if (payloadId == null) {
            throw new ApiException("Missing the required parameter 'payloadId' when calling getRetrieveanchoredtransaction(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRetrieveanchoredtransaction(Async)");
        }
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling getRetrieveanchoredtransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = getRetrieveanchoredtransactionCall(operatorId, payloadId, authorization, xKrn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve anchored transaction
     * Retrieve anchored transaction
     * @param operatorId  (required)
     * @param payloadId  (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @return V1OperatorPayloadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1OperatorPayloadResponse getRetrieveanchoredtransaction(String operatorId, String payloadId, String authorization, String xKrn) throws ApiException {
        ApiResponse<V1OperatorPayloadResponse> resp = getRetrieveanchoredtransactionWithHttpInfo(operatorId, payloadId, authorization, xKrn);
        return resp.getData();
    }

    /**
     * Retrieve anchored transaction
     * Retrieve anchored transaction
     * @param operatorId  (required)
     * @param payloadId  (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @return ApiResponse&lt;V1OperatorPayloadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1OperatorPayloadResponse> getRetrieveanchoredtransactionWithHttpInfo(String operatorId, String payloadId, String authorization, String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = getRetrieveanchoredtransactionValidateBeforeCall(operatorId, payloadId, authorization, xKrn, null, null);
        Type localVarReturnType = new TypeToken<V1OperatorPayloadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve anchored transaction (asynchronously)
     * Retrieve anchored transaction
     * @param operatorId  (required)
     * @param payloadId  (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRetrieveanchoredtransactionAsync(String operatorId, String payloadId, String authorization, String xKrn, final ApiCallback<V1OperatorPayloadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRetrieveanchoredtransactionValidateBeforeCall(operatorId, payloadId, authorization, xKrn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1OperatorPayloadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveBlock
     * @param operatorId  (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveBlockCall(String operatorId, String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operator/{operator_id}/tx"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from-date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to-date", toDate));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveBlockValidateBeforeCall(String operatorId, String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling retrieveBlock(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveBlock(Async)");
        }
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling retrieveBlock(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveBlockCall(operatorId, authorization, xKrn, size, fromDate, toDate, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * retrieveBlock
     * Retrieve anchored transactions
     * @param operatorId  (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @return V1OperatorTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1OperatorTxResponse retrieveBlock(String operatorId, String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor) throws ApiException {
        ApiResponse<V1OperatorTxResponse> resp = retrieveBlockWithHttpInfo(operatorId, authorization, xKrn, size, fromDate, toDate, cursor);
        return resp.getData();
    }

    /**
     * retrieveBlock
     * Retrieve anchored transactions
     * @param operatorId  (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @return ApiResponse&lt;V1OperatorTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1OperatorTxResponse> retrieveBlockWithHttpInfo(String operatorId, String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = retrieveBlockValidateBeforeCall(operatorId, authorization, xKrn, size, fromDate, toDate, cursor, null, null);
        Type localVarReturnType = new TypeToken<V1OperatorTxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieveBlock (asynchronously)
     * Retrieve anchored transactions
     * @param operatorId  (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveBlockAsync(String operatorId, String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ApiCallback<V1OperatorTxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveBlockValidateBeforeCall(operatorId, authorization, xKrn, size, fromDate, toDate, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1OperatorTxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveOperator
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param operatorId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveOperatorCall(String authorization, String xKrn, String operatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operator/{operator_id}"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveOperatorValidateBeforeCall(String authorization, String xKrn, String operatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveOperator(Async)");
        }
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling retrieveOperator(Async)");
        }
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling retrieveOperator(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveOperatorCall(authorization, xKrn, operatorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * retrieveOperator
     * Retrieve registered service chain operator
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param operatorId  (required)
     * @return V1OperatorResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1OperatorResponse1 retrieveOperator(String authorization, String xKrn, String operatorId) throws ApiException {
        ApiResponse<V1OperatorResponse1> resp = retrieveOperatorWithHttpInfo(authorization, xKrn, operatorId);
        return resp.getData();
    }

    /**
     * retrieveOperator
     * Retrieve registered service chain operator
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param operatorId  (required)
     * @return ApiResponse&lt;V1OperatorResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1OperatorResponse1> retrieveOperatorWithHttpInfo(String authorization, String xKrn, String operatorId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveOperatorValidateBeforeCall(authorization, xKrn, operatorId, null, null);
        Type localVarReturnType = new TypeToken<V1OperatorResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieveOperator (asynchronously)
     * Retrieve registered service chain operator
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param operatorId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveOperatorAsync(String authorization, String xKrn, String operatorId, final ApiCallback<V1OperatorResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveOperatorValidateBeforeCall(authorization, xKrn, operatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1OperatorResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveanchoredtransaction
     * @param operatorId  (required)
     * @param txHash Klaytn transaction hash (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveanchoredtransactionCall(String operatorId, String txHash, String authorization, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operator/{operator_id}/tx/{tx_hash}"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()))
            .replaceAll("\\{" + "tx_hash" + "\\}", apiClient.escapeString(txHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveanchoredtransactionValidateBeforeCall(String operatorId, String txHash, String authorization, String xKrn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling retrieveanchoredtransaction(Async)");
        }
        
        // verify the required parameter 'txHash' is set
        if (txHash == null) {
            throw new ApiException("Missing the required parameter 'txHash' when calling retrieveanchoredtransaction(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveanchoredtransaction(Async)");
        }
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling retrieveanchoredtransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveanchoredtransactionCall(operatorId, txHash, authorization, xKrn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve anchored transaction
     * Retrieve anchored transaction
     * @param operatorId  (required)
     * @param txHash Klaytn transaction hash (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @return V1OperatorTxResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1OperatorTxResponse1 retrieveanchoredtransaction(String operatorId, String txHash, String authorization, String xKrn) throws ApiException {
        ApiResponse<V1OperatorTxResponse1> resp = retrieveanchoredtransactionWithHttpInfo(operatorId, txHash, authorization, xKrn);
        return resp.getData();
    }

    /**
     * Retrieve anchored transaction
     * Retrieve anchored transaction
     * @param operatorId  (required)
     * @param txHash Klaytn transaction hash (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @return ApiResponse&lt;V1OperatorTxResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1OperatorTxResponse1> retrieveanchoredtransactionWithHttpInfo(String operatorId, String txHash, String authorization, String xKrn) throws ApiException {
        com.squareup.okhttp.Call call = retrieveanchoredtransactionValidateBeforeCall(operatorId, txHash, authorization, xKrn, null, null);
        Type localVarReturnType = new TypeToken<V1OperatorTxResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve anchored transaction (asynchronously)
     * Retrieve anchored transaction
     * @param operatorId  (required)
     * @param txHash Klaytn transaction hash (required)
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveanchoredtransactionAsync(String operatorId, String txHash, String authorization, String xKrn, final ApiCallback<V1OperatorTxResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveanchoredtransactionValidateBeforeCall(operatorId, txHash, authorization, xKrn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1OperatorTxResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveregisteredservicechainoperators
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveregisteredservicechainoperatorsCall(String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from-date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to-date", toDate));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKrn != null)
        localVarHeaderParams.put("x-krn", apiClient.parameterToString(xKrn));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveregisteredservicechainoperatorsValidateBeforeCall(String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveregisteredservicechainoperators(Async)");
        }
        
        // verify the required parameter 'xKrn' is set
        if (xKrn == null) {
            throw new ApiException("Missing the required parameter 'xKrn' when calling retrieveregisteredservicechainoperators(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveregisteredservicechainoperatorsCall(authorization, xKrn, size, fromDate, toDate, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve registered service chain operators
     * Retrieve registered service chain operators
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @return V1OperatorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1OperatorResponse retrieveregisteredservicechainoperators(String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor) throws ApiException {
        ApiResponse<V1OperatorResponse> resp = retrieveregisteredservicechainoperatorsWithHttpInfo(authorization, xKrn, size, fromDate, toDate, cursor);
        return resp.getData();
    }

    /**
     * Retrieve registered service chain operators
     * Retrieve registered service chain operators
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @return ApiResponse&lt;V1OperatorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1OperatorResponse> retrieveregisteredservicechainoperatorsWithHttpInfo(String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = retrieveregisteredservicechainoperatorsValidateBeforeCall(authorization, xKrn, size, fromDate, toDate, cursor, null, null);
        Type localVarReturnType = new TypeToken<V1OperatorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve registered service chain operators (asynchronously)
     * Retrieve registered service chain operators
     * @param authorization authorization. Check this authroization value can use this service. (required)
     * @param xKrn operator pool krn (required)
     * @param size page size (optional, default to 100)
     * @param fromDate supports Unix timestamps in millis (optional)
     * @param toDate supports Unix timestamps in millis (optional)
     * @param cursor cursor (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveregisteredservicechainoperatorsAsync(String authorization, String xKrn, Integer size, Integer fromDate, Integer toDate, String cursor, final ApiCallback<V1OperatorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveregisteredservicechainoperatorsValidateBeforeCall(authorization, xKrn, size, fromDate, toDate, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1OperatorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
