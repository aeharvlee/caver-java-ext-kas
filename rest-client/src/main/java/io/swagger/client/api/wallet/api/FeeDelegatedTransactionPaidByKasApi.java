/*
 * Wallet API
 * # Introduction Wallet API는 클레이튼 계정을 만들어 관리하고 트랜잭션을 전송하는 API입니다. Wallet API로 Klaytn 계정을 만들면 여러분은 개인키를 따로 관리할 필요가 없습니다. Wallet API는 BApp을 위해 Klaytn 계정 개인키를 안전하게 보관하는 지갑을 제공합니다. Wallet API 사용에 관한 자세한 내용은 [튜토리얼](링크)을 확인하십시오.  Wallet API는 크게 Klaytn 계정을 만들고 관리하는 Account 파트와 여러 종류의 트랜잭션을 전송하는 Transaction 파트로 나뉩니다.  Wallet API는 Klaytn 계정을 생성, 삭제, 모니터링하고 계정을 다중 서명 계정(Multisig 계정)으로 업데이트하며 KAS에 등록된 모든 계정의 개인키를 관리합니다.  또 Wallet API는 트랜잭션을 만들어 Klaytn에 전송합니다. 이 트랜잭션에는 다중 서명 계정이 보내는 트랜잭션도 포함됩니다. 다중 서명 시 임계값\\(Threshold\\)을 만족하면 트랜잭션은 Klaytn에 자동으로 전송됩니다. 다중 서명에 관한 자세한 내용은 [다음](링크)을 확인하십시오.  트랜잭션은 크게 기본 트랜잭션과 수수료 대납 트랜잭션으로 나뉩니다. 수수료 대납 트랜잭션은 크게 글로벌 수수료 대납 트랜잭션과 사용자 수수료 대납 트랜잭션으로 나뉩니다. 글로벌 수수료 대납 트랜잭션은 Ground X의 KAS 계정에서 트랜잭션 수수료를 일단 대납해주고 나중에 여러분에게 이 수수료를 청구하는 방식입니다. 사용자 수수료 대납 트랜잭션은 여러분이 직접 트랜잭션 수수료를 대납하는 계정을 만들고, 트랜잭션을 보낼 때 이 대납 계정이 트랜잭션 수수료를 납부하도록 하는 방식입니다.  Wallet API는 아래와 같은 기능 및 제약사항을 갖고 있습니다.  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | 제약사항 | Cypress(Mainnet), Baobab(Testnet) 지원\\(Service Chain 미지원\\) | |  |  | 외부 관리키에 대한 계정 관리 미지원 | |  |  | RLP 인코딩된 트랜잭션의 다중 서명 미지원 | |  | 계정관리 | 계정 생성, 조회, 삭제 | |  |  | 다중 서명 계정 업데이트 | |  | 트랜잭션 관리 | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) 트랜잭션 생성 및 전송 | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) 트랜잭션 생성 및 전송 | |  |  | RLP 인코딩된 트랜잭션\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) 생성 및 전송 | |  |  | 다중 서명 트랜잭션 관리 및 전송 | |  | 관리자 | 리소스 풀 관리\\(생성, 풀 조회, 삭제, 계정 조회\\) |  
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api.wallet.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;
import io.swagger.client.api.wallet.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeeDelegatedTransactionPaidByKasApi {
    private ApiClient apiClient;

    public FeeDelegatedTransactionPaidByKasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeeDelegatedTransactionPaidByKasApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for fDAccountUpdateTransactionResponse
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fDAccountUpdateTransactionResponseCall(String xChainId, FDAccountUpdateTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/tx/fd/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fDAccountUpdateTransactionResponseValidateBeforeCall(String xChainId, FDAccountUpdateTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fDAccountUpdateTransactionResponse(Async)");
        }
        
        com.squareup.okhttp.Call call = fDAccountUpdateTransactionResponseCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 글로벌 대납 계정 업데이트 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 클레이튼 계정키를 업데이트 하기 위한 트랜잭션을 생성합니다. 클레이튼의 다양한 계정키는 [Klaytn docs](https://docs.klaytn.com/klaytn/design/accounts)를 참고하시기 바랍니다.  ### 키 종류별 &#x60;accountKey&#x60; 스키마  * keyType1 (AccountKeyLegacy)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 1 } &#x60;&#x60;&#x60;  * keyType2 (AccountKeyPublic)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 2,   \&quot;key\&quot;: \&quot;{publicKey}\&quot; } &#x60;&#x60;&#x60;  * keyType3 (AccountKeyFail)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {  \&quot;keyType\&quot;: 3 } &#x60;&#x60;&#x60;  * keyType4 (AccountKeyWeightedMultiSig)  weightedKeys 내의 각 weight의 합은 threshold 보다 같거나 커야합니다. weightedKeys는 최대 10개까지 설정 가능합니다.  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 4,   \&quot;key\&quot;: {     \&quot;threshold\&quot;: 3,     \&quot;weightedKeys\&quot;: [       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       }     ]   } } &#x60;&#x60;&#x60;  * keyType5 (AccountKeyRoleBased)  앞서 설명한 keyType 1~4을 각 역할(트랜잭션, 업데이트, 대납)별로 설정할 수 있으며 안에 keyType 5를 다시 설정할 수는 없음  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 5,   \&quot;key\&quot;: [     {       \&quot;keyType\&quot;: 3,       \&quot;key\&quot;: {}     },     {       \&quot;keyType\&quot;: 4,       \&quot;key\&quot;: {         \&quot;threshold\&quot;: 2,         \&quot;weightedKeys\&quot;: [           {             \&quot;weight\&quot;: 1,             \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;           },           {             \&quot;weight\&quot;: 1,             \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;           }         ]       }     },     {       \&quot;keyType\&quot;: 2,       \&quot;key\&quot;: \&quot;{publicKey}\&quot;     } } &#x60;&#x60;&#x60;
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return FDTransactionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionResult fDAccountUpdateTransactionResponse(String xChainId, FDAccountUpdateTransactionRequest body) throws ApiException {
        ApiResponse<FDTransactionResult> resp = fDAccountUpdateTransactionResponseWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * 글로벌 대납 계정 업데이트 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 클레이튼 계정키를 업데이트 하기 위한 트랜잭션을 생성합니다. 클레이튼의 다양한 계정키는 [Klaytn docs](https://docs.klaytn.com/klaytn/design/accounts)를 참고하시기 바랍니다.  ### 키 종류별 &#x60;accountKey&#x60; 스키마  * keyType1 (AccountKeyLegacy)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 1 } &#x60;&#x60;&#x60;  * keyType2 (AccountKeyPublic)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 2,   \&quot;key\&quot;: \&quot;{publicKey}\&quot; } &#x60;&#x60;&#x60;  * keyType3 (AccountKeyFail)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {  \&quot;keyType\&quot;: 3 } &#x60;&#x60;&#x60;  * keyType4 (AccountKeyWeightedMultiSig)  weightedKeys 내의 각 weight의 합은 threshold 보다 같거나 커야합니다. weightedKeys는 최대 10개까지 설정 가능합니다.  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 4,   \&quot;key\&quot;: {     \&quot;threshold\&quot;: 3,     \&quot;weightedKeys\&quot;: [       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       }     ]   } } &#x60;&#x60;&#x60;  * keyType5 (AccountKeyRoleBased)  앞서 설명한 keyType 1~4을 각 역할(트랜잭션, 업데이트, 대납)별로 설정할 수 있으며 안에 keyType 5를 다시 설정할 수는 없음  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 5,   \&quot;key\&quot;: [     {       \&quot;keyType\&quot;: 3,       \&quot;key\&quot;: {}     },     {       \&quot;keyType\&quot;: 4,       \&quot;key\&quot;: {         \&quot;threshold\&quot;: 2,         \&quot;weightedKeys\&quot;: [           {             \&quot;weight\&quot;: 1,             \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;           },           {             \&quot;weight\&quot;: 1,             \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;           }         ]       }     },     {       \&quot;keyType\&quot;: 2,       \&quot;key\&quot;: \&quot;{publicKey}\&quot;     } } &#x60;&#x60;&#x60;
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FDTransactionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionResult> fDAccountUpdateTransactionResponseWithHttpInfo(String xChainId, FDAccountUpdateTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = fDAccountUpdateTransactionResponseValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 글로벌 대납 계정 업데이트 트랜잭션 (asynchronously)
     * KAS 글로벌 대납 계정을 이용하여 클레이튼 계정키를 업데이트 하기 위한 트랜잭션을 생성합니다. 클레이튼의 다양한 계정키는 [Klaytn docs](https://docs.klaytn.com/klaytn/design/accounts)를 참고하시기 바랍니다.  ### 키 종류별 &#x60;accountKey&#x60; 스키마  * keyType1 (AccountKeyLegacy)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 1 } &#x60;&#x60;&#x60;  * keyType2 (AccountKeyPublic)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 2,   \&quot;key\&quot;: \&quot;{publicKey}\&quot; } &#x60;&#x60;&#x60;  * keyType3 (AccountKeyFail)  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {  \&quot;keyType\&quot;: 3 } &#x60;&#x60;&#x60;  * keyType4 (AccountKeyWeightedMultiSig)  weightedKeys 내의 각 weight의 합은 threshold 보다 같거나 커야합니다. weightedKeys는 최대 10개까지 설정 가능합니다.  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 4,   \&quot;key\&quot;: {     \&quot;threshold\&quot;: 3,     \&quot;weightedKeys\&quot;: [       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       },       {         \&quot;weight\&quot;: 1,         \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;       }     ]   } } &#x60;&#x60;&#x60;  * keyType5 (AccountKeyRoleBased)  앞서 설명한 keyType 1~4을 각 역할(트랜잭션, 업데이트, 대납)별로 설정할 수 있으며 안에 keyType 5를 다시 설정할 수는 없음  &#x60;&#x60;&#x60;json \&quot;accountKey\&quot;: {   \&quot;keyType\&quot;: 5,   \&quot;key\&quot;: [     {       \&quot;keyType\&quot;: 3,       \&quot;key\&quot;: {}     },     {       \&quot;keyType\&quot;: 4,       \&quot;key\&quot;: {         \&quot;threshold\&quot;: 2,         \&quot;weightedKeys\&quot;: [           {             \&quot;weight\&quot;: 1,             \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;           },           {             \&quot;weight\&quot;: 1,             \&quot;publicKey\&quot;: \&quot;{publicKey}\&quot;           }         ]       }     },     {       \&quot;keyType\&quot;: 2,       \&quot;key\&quot;: \&quot;{publicKey}\&quot;     } } &#x60;&#x60;&#x60;
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fDAccountUpdateTransactionResponseAsync(String xChainId, FDAccountUpdateTransactionRequest body, final ApiCallback<FDTransactionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fDAccountUpdateTransactionResponseValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fDAnchorTransaction
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fDAnchorTransactionCall(String xChainId, FDAnchorTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/tx/fd/anchor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fDAnchorTransactionValidateBeforeCall(String xChainId, FDAnchorTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fDAnchorTransaction(Async)");
        }
        
        com.squareup.okhttp.Call call = fDAnchorTransactionCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 글로벌 대납 앵커링 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 블록체인 데이터를 앵커링 하기 위한 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return FDTransactionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionResult fDAnchorTransaction(String xChainId, FDAnchorTransactionRequest body) throws ApiException {
        ApiResponse<FDTransactionResult> resp = fDAnchorTransactionWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * 글로벌 대납 앵커링 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 블록체인 데이터를 앵커링 하기 위한 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FDTransactionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionResult> fDAnchorTransactionWithHttpInfo(String xChainId, FDAnchorTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = fDAnchorTransactionValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 글로벌 대납 앵커링 트랜잭션 (asynchronously)
     * KAS 글로벌 대납 계정을 이용하여 블록체인 데이터를 앵커링 하기 위한 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fDAnchorTransactionAsync(String xChainId, FDAnchorTransactionRequest body, final ApiCallback<FDTransactionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fDAnchorTransactionValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fDCancelTransactionResponse
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fDCancelTransactionResponseCall(String xChainId, FDCancelTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/tx/fd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fDCancelTransactionResponseValidateBeforeCall(String xChainId, FDCancelTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fDCancelTransactionResponse(Async)");
        }
        
        com.squareup.okhttp.Call call = fDCancelTransactionResponseCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 글로벌 대납 취소 트랜잭션
     * KAS 글로벌 대납 계정으로 Klaytn에 전송했으나 보류중인 트랜잭션을 취소시키기 위한 트랜잭션을 생성합니다. 취소를 위해 논스 또는 트랜잭션 해시 둘 중 하나의 값이 꼭 필요합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return FDTransactionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionResult fDCancelTransactionResponse(String xChainId, FDCancelTransactionRequest body) throws ApiException {
        ApiResponse<FDTransactionResult> resp = fDCancelTransactionResponseWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * 글로벌 대납 취소 트랜잭션
     * KAS 글로벌 대납 계정으로 Klaytn에 전송했으나 보류중인 트랜잭션을 취소시키기 위한 트랜잭션을 생성합니다. 취소를 위해 논스 또는 트랜잭션 해시 둘 중 하나의 값이 꼭 필요합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FDTransactionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionResult> fDCancelTransactionResponseWithHttpInfo(String xChainId, FDCancelTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = fDCancelTransactionResponseValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 글로벌 대납 취소 트랜잭션 (asynchronously)
     * KAS 글로벌 대납 계정으로 Klaytn에 전송했으나 보류중인 트랜잭션을 취소시키기 위한 트랜잭션을 생성합니다. 취소를 위해 논스 또는 트랜잭션 해시 둘 중 하나의 값이 꼭 필요합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fDCancelTransactionResponseAsync(String xChainId, FDCancelTransactionRequest body, final ApiCallback<FDTransactionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fDCancelTransactionResponseValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fDContractDeployTransaction
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fDContractDeployTransactionCall(String xChainId, FDContractDeployTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/tx/fd/contract/deploy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fDContractDeployTransactionValidateBeforeCall(String xChainId, FDContractDeployTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fDContractDeployTransaction(Async)");
        }
        
        com.squareup.okhttp.Call call = fDContractDeployTransactionCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 글로벌 대납 컨트랙트 배포 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 컨트랙트 배포르 위해 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return FDTransactionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionResult fDContractDeployTransaction(String xChainId, FDContractDeployTransactionRequest body) throws ApiException {
        ApiResponse<FDTransactionResult> resp = fDContractDeployTransactionWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * 글로벌 대납 컨트랙트 배포 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 컨트랙트 배포르 위해 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FDTransactionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionResult> fDContractDeployTransactionWithHttpInfo(String xChainId, FDContractDeployTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = fDContractDeployTransactionValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 글로벌 대납 컨트랙트 배포 트랜잭션 (asynchronously)
     * KAS 글로벌 대납 계정을 이용하여 컨트랙트 배포르 위해 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fDContractDeployTransactionAsync(String xChainId, FDContractDeployTransactionRequest body, final ApiCallback<FDTransactionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fDContractDeployTransactionValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fDContractExecutionTransaction
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fDContractExecutionTransactionCall(String xChainId, FDContractExecutionTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/tx/fd/contract/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fDContractExecutionTransactionValidateBeforeCall(String xChainId, FDContractExecutionTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fDContractExecutionTransaction(Async)");
        }
        
        com.squareup.okhttp.Call call = fDContractExecutionTransactionCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 글로벌 대납 컨트랙트 실행 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 배포된 컨트랙트 실행에 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return FDTransactionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionResult fDContractExecutionTransaction(String xChainId, FDContractExecutionTransactionRequest body) throws ApiException {
        ApiResponse<FDTransactionResult> resp = fDContractExecutionTransactionWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * 글로벌 대납 컨트랙트 실행 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 배포된 컨트랙트 실행에 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FDTransactionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionResult> fDContractExecutionTransactionWithHttpInfo(String xChainId, FDContractExecutionTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = fDContractExecutionTransactionValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 글로벌 대납 컨트랙트 실행 트랜잭션 (asynchronously)
     * KAS 글로벌 대납 계정을 이용하여 배포된 컨트랙트 실행에 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fDContractExecutionTransactionAsync(String xChainId, FDContractExecutionTransactionRequest body, final ApiCallback<FDTransactionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fDContractExecutionTransactionValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fDProcessRLP
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fDProcessRLPCall(String xChainId, FDProcessRLPRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/tx/fd/rlp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fDProcessRLPValidateBeforeCall(String xChainId, FDProcessRLPRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fDProcessRLP(Async)");
        }
        
        com.squareup.okhttp.Call call = fDProcessRLPCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 글로벌 대납 RLP를 이용한 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 rlp(SigRLP 또는 TxHashRLP)를 이용하여 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return FDTransactionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionResult fDProcessRLP(String xChainId, FDProcessRLPRequest body) throws ApiException {
        ApiResponse<FDTransactionResult> resp = fDProcessRLPWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * 글로벌 대납 RLP를 이용한 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 rlp(SigRLP 또는 TxHashRLP)를 이용하여 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FDTransactionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionResult> fDProcessRLPWithHttpInfo(String xChainId, FDProcessRLPRequest body) throws ApiException {
        com.squareup.okhttp.Call call = fDProcessRLPValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 글로벌 대납 RLP를 이용한 트랜잭션 (asynchronously)
     * KAS 글로벌 대납 계정을 이용하여 rlp(SigRLP 또는 TxHashRLP)를 이용하여 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fDProcessRLPAsync(String xChainId, FDProcessRLPRequest body, final ApiCallback<FDTransactionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fDProcessRLPValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fDValueTransferTransaction
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fDValueTransferTransactionCall(String xChainId, FDValueTransferTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/tx/fd/value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fDValueTransferTransactionValidateBeforeCall(String xChainId, FDValueTransferTransactionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fDValueTransferTransaction(Async)");
        }
        
        com.squareup.okhttp.Call call = fDValueTransferTransactionCall(xChainId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 글로벌 대납 클레이 전송 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 클레이 전송 및 메모를 포함한 클레이 전송에 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return FDTransactionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FDTransactionResult fDValueTransferTransaction(String xChainId, FDValueTransferTransactionRequest body) throws ApiException {
        ApiResponse<FDTransactionResult> resp = fDValueTransferTransactionWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * 글로벌 대납 클레이 전송 트랜잭션
     * KAS 글로벌 대납 계정을 이용하여 클레이 전송 및 메모를 포함한 클레이 전송에 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FDTransactionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FDTransactionResult> fDValueTransferTransactionWithHttpInfo(String xChainId, FDValueTransferTransactionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = fDValueTransferTransactionValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 글로벌 대납 클레이 전송 트랜잭션 (asynchronously)
     * KAS 글로벌 대납 계정을 이용하여 클레이 전송 및 메모를 포함한 클레이 전송에 사용되는 트랜잭션을 생성합니다.
     * @param xChainId Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fDValueTransferTransactionAsync(String xChainId, FDValueTransferTransactionRequest body, final ApiCallback<FDTransactionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fDValueTransferTransactionValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FDTransactionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
