/*
 * Anchor API
 * # Introduction 이 문서는 KAS\\(Klaytn API Service\\)의 Anchor API를 소개하는 문서입니다. Anchor API는 서비스 체인 데이터의 신뢰성을 보장하기 위해 데이터 신뢰성을 증명할 수 있는 메타데이터를 Klaytn 메인 체인에 전송하는 기능을 제공합니다.  자세한 사용 예시는 [튜토리얼](링크)를 확인하십시오.  
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api.anchor.v1.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;
import io.swagger.client.api.anchor.v1.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataAnchoringTransactionApi {
    private ApiClient apiClient;

    public DataAnchoringTransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataAnchoringTransactionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for anchorBlock
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call anchorBlockCall(String xChainId, AnchorBlockRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/anchor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call anchorBlockValidateBeforeCall(String xChainId, AnchorBlockRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling anchorBlock(Async)");
        }
        

        com.squareup.okhttp.Call call = anchorBlockCall(xChainId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * AnchorBlock
     * 블록체인 데이터를 앵커링 하기 위해 사용됩니다. 이미 설정한 오퍼레이터를 통해 앵커 트랜잭션 발생 및 관리합니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param body  (optional)
     * @return AnchorBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchorBlockResponse anchorBlock(String xChainId, AnchorBlockRequest body) throws ApiException {
        ApiResponse<AnchorBlockResponse> resp = anchorBlockWithHttpInfo(xChainId, body);
        return resp.getData();
    }

    /**
     * AnchorBlock
     * 블록체인 데이터를 앵커링 하기 위해 사용됩니다. 이미 설정한 오퍼레이터를 통해 앵커 트랜잭션 발생 및 관리합니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AnchorBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchorBlockResponse> anchorBlockWithHttpInfo(String xChainId, AnchorBlockRequest body) throws ApiException {
        com.squareup.okhttp.Call call = anchorBlockValidateBeforeCall(xChainId, body, null, null);
        Type localVarReturnType = new TypeToken<AnchorBlockResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * AnchorBlock (asynchronously)
     * 블록체인 데이터를 앵커링 하기 위해 사용됩니다. 이미 설정한 오퍼레이터를 통해 앵커 트랜잭션 발생 및 관리합니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call anchorBlockAsync(String xChainId, AnchorBlockRequest body, final ApiCallback<AnchorBlockResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = anchorBlockValidateBeforeCall(xChainId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchorBlockResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnchorBlockByPayloadID
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param payloadId (required) Payload ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnchorBlockByPayloadIDCall(String xChainId, String operatorId, String payloadId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operator/{operator_id}/payload/{payload_id}"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()))
            .replaceAll("\\{" + "payload_id" + "\\}", apiClient.escapeString(payloadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnchorBlockByPayloadIDValidateBeforeCall(String xChainId, String operatorId, String payloadId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getAnchorBlockByPayloadID(Async)");
        }
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling getAnchorBlockByPayloadID(Async)");
        }
        
        // verify the required parameter 'payloadId' is set
        if (payloadId == null) {
            throw new ApiException("Missing the required parameter 'payloadId' when calling getAnchorBlockByPayloadID(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnchorBlockByPayloadIDCall(xChainId, operatorId, payloadId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GetAnchorBlockByPayloadID
     * Paylaod ID와 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param payloadId (required) Payload ID (required)
     * @return GetAnchorBlockByPayloadIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetAnchorBlockByPayloadIDResponse getAnchorBlockByPayloadID(String xChainId, String operatorId, String payloadId) throws ApiException {
        ApiResponse<GetAnchorBlockByPayloadIDResponse> resp = getAnchorBlockByPayloadIDWithHttpInfo(xChainId, operatorId, payloadId);
        return resp.getData();
    }

    /**
     * GetAnchorBlockByPayloadID
     * Paylaod ID와 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param payloadId (required) Payload ID (required)
     * @return ApiResponse&lt;GetAnchorBlockByPayloadIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetAnchorBlockByPayloadIDResponse> getAnchorBlockByPayloadIDWithHttpInfo(String xChainId, String operatorId, String payloadId) throws ApiException {
        com.squareup.okhttp.Call call = getAnchorBlockByPayloadIDValidateBeforeCall(xChainId, operatorId, payloadId, null, null);
        Type localVarReturnType = new TypeToken<GetAnchorBlockByPayloadIDResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetAnchorBlockByPayloadID (asynchronously)
     * Paylaod ID와 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param payloadId (required) Payload ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnchorBlockByPayloadIDAsync(String xChainId, String operatorId, String payloadId, final ApiCallback<GetAnchorBlockByPayloadIDResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnchorBlockByPayloadIDValidateBeforeCall(xChainId, operatorId, payloadId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAnchorBlockByPayloadIDResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnchorBlockByTx
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param txHash (required) 트랜잭션 해시값 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnchorBlockByTxCall(String xChainId, String operatorId, String txHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operator/{operator_id}/tx/{tx_hash}"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()))
            .replaceAll("\\{" + "tx_hash" + "\\}", apiClient.escapeString(txHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnchorBlockByTxValidateBeforeCall(String xChainId, String operatorId, String txHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling getAnchorBlockByTx(Async)");
        }
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling getAnchorBlockByTx(Async)");
        }
        
        // verify the required parameter 'txHash' is set
        if (txHash == null) {
            throw new ApiException("Missing the required parameter 'txHash' when calling getAnchorBlockByTx(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnchorBlockByTxCall(xChainId, operatorId, txHash, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GetAnchorBlockByTx
     * 트랜잭션 해시값과 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param txHash (required) 트랜잭션 해시값 (required)
     * @return GetAnchorBlockByTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetAnchorBlockByTxResponse getAnchorBlockByTx(String xChainId, String operatorId, String txHash) throws ApiException {
        ApiResponse<GetAnchorBlockByTxResponse> resp = getAnchorBlockByTxWithHttpInfo(xChainId, operatorId, txHash);
        return resp.getData();
    }

    /**
     * GetAnchorBlockByTx
     * 트랜잭션 해시값과 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param txHash (required) 트랜잭션 해시값 (required)
     * @return ApiResponse&lt;GetAnchorBlockByTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetAnchorBlockByTxResponse> getAnchorBlockByTxWithHttpInfo(String xChainId, String operatorId, String txHash) throws ApiException {
        com.squareup.okhttp.Call call = getAnchorBlockByTxValidateBeforeCall(xChainId, operatorId, txHash, null, null);
        Type localVarReturnType = new TypeToken<GetAnchorBlockByTxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetAnchorBlockByTx (asynchronously)
     * 트랜잭션 해시값과 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param txHash (required) 트랜잭션 해시값 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnchorBlockByTxAsync(String xChainId, String operatorId, String txHash, final ApiCallback<GetAnchorBlockByTxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnchorBlockByTxValidateBeforeCall(xChainId, operatorId, txHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAnchorBlockByTxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retirieveAnchorBlock
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param size (optional) 검색할 계정의 최대 사이즈 (optional)
     * @param cursor (optional) 마지막으로 검색된 커서의 정보 (optional)
     * @param fromDate (optional) 검색하고자 하는 마지 시간의 타임스탬프 (초단위) (optional)
     * @param toDate (optional) 검색하고자 하는 마지막 시간의 타임스탬프 (초단위) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retirieveAnchorBlockCall(String xChainId, String operatorId, Long size, String cursor, String fromDate, String toDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/operator/{operator_id}/tx"
            .replaceAll("\\{" + "operator_id" + "\\}", apiClient.escapeString(operatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from-date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to-date", toDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retirieveAnchorBlockValidateBeforeCall(String xChainId, String operatorId, Long size, String cursor, String fromDate, String toDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling retirieveAnchorBlock(Async)");
        }
        
        // verify the required parameter 'operatorId' is set
        if (operatorId == null) {
            throw new ApiException("Missing the required parameter 'operatorId' when calling retirieveAnchorBlock(Async)");
        }
        

        com.squareup.okhttp.Call call = retirieveAnchorBlockCall(xChainId, operatorId, size, cursor, fromDate, toDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * RetirieveAnchorBlock
     * 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션 목록을 조회합니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param size (optional) 검색할 계정의 최대 사이즈 (optional)
     * @param cursor (optional) 마지막으로 검색된 커서의 정보 (optional)
     * @param fromDate (optional) 검색하고자 하는 마지 시간의 타임스탬프 (초단위) (optional)
     * @param toDate (optional) 검색하고자 하는 마지막 시간의 타임스탬프 (초단위) (optional)
     * @return RetirieveAnchorBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetirieveAnchorBlockResponse retirieveAnchorBlock(String xChainId, String operatorId, Long size, String cursor, String fromDate, String toDate) throws ApiException {
        ApiResponse<RetirieveAnchorBlockResponse> resp = retirieveAnchorBlockWithHttpInfo(xChainId, operatorId, size, cursor, fromDate, toDate);
        return resp.getData();
    }

    /**
     * RetirieveAnchorBlock
     * 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션 목록을 조회합니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param size (optional) 검색할 계정의 최대 사이즈 (optional)
     * @param cursor (optional) 마지막으로 검색된 커서의 정보 (optional)
     * @param fromDate (optional) 검색하고자 하는 마지 시간의 타임스탬프 (초단위) (optional)
     * @param toDate (optional) 검색하고자 하는 마지막 시간의 타임스탬프 (초단위) (optional)
     * @return ApiResponse&lt;RetirieveAnchorBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetirieveAnchorBlockResponse> retirieveAnchorBlockWithHttpInfo(String xChainId, String operatorId, Long size, String cursor, String fromDate, String toDate) throws ApiException {
        com.squareup.okhttp.Call call = retirieveAnchorBlockValidateBeforeCall(xChainId, operatorId, size, cursor, fromDate, toDate, null, null);
        Type localVarReturnType = new TypeToken<RetirieveAnchorBlockResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * RetirieveAnchorBlock (asynchronously)
     * 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션 목록을 조회합니다. 
     * @param xChainId (required) Klaytn Chain ID로 default KRN 사용시에는 필수적으로 요구되며, KRN을 사용시에는 생략할 수 있음. (required)
     * @param operatorId (required) Operator 계정 주소 (required)
     * @param size (optional) 검색할 계정의 최대 사이즈 (optional)
     * @param cursor (optional) 마지막으로 검색된 커서의 정보 (optional)
     * @param fromDate (optional) 검색하고자 하는 마지 시간의 타임스탬프 (초단위) (optional)
     * @param toDate (optional) 검색하고자 하는 마지막 시간의 타임스탬프 (초단위) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retirieveAnchorBlockAsync(String xChainId, String operatorId, Long size, String cursor, String fromDate, String toDate, final ApiCallback<RetirieveAnchorBlockResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retirieveAnchorBlockValidateBeforeCall(xChainId, operatorId, size, cursor, fromDate, toDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetirieveAnchorBlockResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
