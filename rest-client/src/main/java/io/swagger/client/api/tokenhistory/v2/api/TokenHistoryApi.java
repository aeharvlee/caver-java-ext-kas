/*
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api.tokenhistory.v2.api;


import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;
import io.swagger.client.api.tokenhistory.v2.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenHistoryApi {
    private ApiClient apiClient;

    public TokenHistoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenHistoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addressTransfer
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param address  (required)
     * @param kind [“klay”, “ft”, “nft”] 중 포함 할 유형, 지정안될 경우 모든 유형을 조회  (optional)
     * @param caFilter 조회할 FT 또는 NFT 컨트랙트의 주소 (optional)
     * @param range 조회 범위 지정 (블록번호 또는 Unix time) (optional)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressTransferCall(String xChainId, String address, String kind, String caFilter, String range, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transfer/account/{address}"
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (kind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kind", kind));
        if (caFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("caFilter", caFilter));
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("range", range));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressTransferValidateBeforeCall(String xChainId, String address, String kind, String caFilter, String range, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling addressTransfer(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling addressTransfer(Async)");
        }
        

        com.squareup.okhttp.Call call = addressTransferCall(xChainId, address, kind, caFilter, range, size, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Address로 통합 Transfer 리스트 조회
     * 특정 주소를 기준으로 거래내역을 조회합니다. 기능적으로 &#x60;GET /v2/transfer&#x60;와 동일하나 결과로 반환된 Transfer 객체의 &#x60;from&#x60; 또는 &#x60;to&#x60;가 제시된 주소와 같습니다.  * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## Response  | Field Name   | Description               | Example                       | Type                                                   | |--------------|---------------------------|-------------------------------|--------------------------------------------------------| | &#x60;items&#x60;      | &#x60;Transfer&#x60; 객체 리스트    | [Transfer_1, Transfer_2, ...] | array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;] | | &#x60;nextCursor&#x60; | 다음 요청에 사용할 오프셋 | *omitted*                     | string                                                 | 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param address  (required)
     * @param kind [“klay”, “ft”, “nft”] 중 포함 할 유형, 지정안될 경우 모든 유형을 조회  (optional)
     * @param caFilter 조회할 FT 또는 NFT 컨트랙트의 주소 (optional)
     * @param range 조회 범위 지정 (블록번호 또는 Unix time) (optional)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return PageableTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableTransfers addressTransfer(String xChainId, String address, String kind, String caFilter, String range, Integer size, String cursor) throws ApiException {
        ApiResponse<PageableTransfers> resp = addressTransferWithHttpInfo(xChainId, address, kind, caFilter, range, size, cursor);
        return resp.getData();
    }

    /**
     * Address로 통합 Transfer 리스트 조회
     * 특정 주소를 기준으로 거래내역을 조회합니다. 기능적으로 &#x60;GET /v2/transfer&#x60;와 동일하나 결과로 반환된 Transfer 객체의 &#x60;from&#x60; 또는 &#x60;to&#x60;가 제시된 주소와 같습니다.  * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## Response  | Field Name   | Description               | Example                       | Type                                                   | |--------------|---------------------------|-------------------------------|--------------------------------------------------------| | &#x60;items&#x60;      | &#x60;Transfer&#x60; 객체 리스트    | [Transfer_1, Transfer_2, ...] | array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;] | | &#x60;nextCursor&#x60; | 다음 요청에 사용할 오프셋 | *omitted*                     | string                                                 | 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param address  (required)
     * @param kind [“klay”, “ft”, “nft”] 중 포함 할 유형, 지정안될 경우 모든 유형을 조회  (optional)
     * @param caFilter 조회할 FT 또는 NFT 컨트랙트의 주소 (optional)
     * @param range 조회 범위 지정 (블록번호 또는 Unix time) (optional)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return ApiResponse&lt;PageableTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableTransfers> addressTransferWithHttpInfo(String xChainId, String address, String kind, String caFilter, String range, Integer size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = addressTransferValidateBeforeCall(xChainId, address, kind, caFilter, range, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Address로 통합 Transfer 리스트 조회 (asynchronously)
     * 특정 주소를 기준으로 거래내역을 조회합니다. 기능적으로 &#x60;GET /v2/transfer&#x60;와 동일하나 결과로 반환된 Transfer 객체의 &#x60;from&#x60; 또는 &#x60;to&#x60;가 제시된 주소와 같습니다.  * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## Response  | Field Name   | Description               | Example                       | Type                                                   | |--------------|---------------------------|-------------------------------|--------------------------------------------------------| | &#x60;items&#x60;      | &#x60;Transfer&#x60; 객체 리스트    | [Transfer_1, Transfer_2, ...] | array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;] | | &#x60;nextCursor&#x60; | 다음 요청에 사용할 오프셋 | *omitted*                     | string                                                 | 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param address  (required)
     * @param kind [“klay”, “ft”, “nft”] 중 포함 할 유형, 지정안될 경우 모든 유형을 조회  (optional)
     * @param caFilter 조회할 FT 또는 NFT 컨트랙트의 주소 (optional)
     * @param range 조회 범위 지정 (블록번호 또는 Unix time) (optional)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressTransferAsync(String xChainId, String address, String kind, String caFilter, String range, Integer size, String cursor, final ApiCallback<PageableTransfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressTransferValidateBeforeCall(xChainId, address, kind, caFilter, range, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fT
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param status 라벨링 상태 [completed, processing, failed, cancelled] (optional)
     * @param type 컨트랙트 타입 (&#39;kip&#39; for KIPs, &#39;erc&#39; for ERCs, none for both) (optional)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fTCall(String xChainId, String status, String type, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contract/ft";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fTValidateBeforeCall(String xChainId, String status, String type, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fT(Async)");
        }
        

        com.squareup.okhttp.Call call = fTCall(xChainId, status, type, size, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * FT 컨트랙트 리스트 조회
     * 라벨링된 FT 컨트랙트 정보들을 반환합니다.  * [FtContractDetail](#section/Common-Types/FtContractDetail)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;FtContractDetail&#x60; 객체 리스트|[FtContract_1, FtContract_2, ...]|array of &#x60;FtContractDetail&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string|  
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param status 라벨링 상태 [completed, processing, failed, cancelled] (optional)
     * @param type 컨트랙트 타입 (&#39;kip&#39; for KIPs, &#39;erc&#39; for ERCs, none for both) (optional)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return PageableFtContractDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableFtContractDetails fT(String xChainId, String status, String type, Integer size, String cursor) throws ApiException {
        ApiResponse<PageableFtContractDetails> resp = fTWithHttpInfo(xChainId, status, type, size, cursor);
        return resp.getData();
    }

    /**
     * FT 컨트랙트 리스트 조회
     * 라벨링된 FT 컨트랙트 정보들을 반환합니다.  * [FtContractDetail](#section/Common-Types/FtContractDetail)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;FtContractDetail&#x60; 객체 리스트|[FtContract_1, FtContract_2, ...]|array of &#x60;FtContractDetail&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string|  
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param status 라벨링 상태 [completed, processing, failed, cancelled] (optional)
     * @param type 컨트랙트 타입 (&#39;kip&#39; for KIPs, &#39;erc&#39; for ERCs, none for both) (optional)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return ApiResponse&lt;PageableFtContractDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableFtContractDetails> fTWithHttpInfo(String xChainId, String status, String type, Integer size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = fTValidateBeforeCall(xChainId, status, type, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableFtContractDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * FT 컨트랙트 리스트 조회 (asynchronously)
     * 라벨링된 FT 컨트랙트 정보들을 반환합니다.  * [FtContractDetail](#section/Common-Types/FtContractDetail)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;FtContractDetail&#x60; 객체 리스트|[FtContract_1, FtContract_2, ...]|array of &#x60;FtContractDetail&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string|  
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param status 라벨링 상태 [completed, processing, failed, cancelled] (optional)
     * @param type 컨트랙트 타입 (&#39;kip&#39; for KIPs, &#39;erc&#39; for ERCs, none for both) (optional)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fTAsync(String xChainId, String status, String type, Integer size, String cursor, final ApiCallback<PageableFtContractDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fTValidateBeforeCall(xChainId, status, type, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableFtContractDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fT_0
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param ftAddress FT 컨트랙트 주소   (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fT_0Call(String xChainId, String ftAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contract/ft/{ftAddress}"
            .replaceAll("\\{" + "ftAddress" + "\\}", apiClient.escapeString(ftAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fT_0ValidateBeforeCall(String xChainId, String ftAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling fT_0(Async)");
        }
        
        // verify the required parameter 'ftAddress' is set
        if (ftAddress == null) {
            throw new ApiException("Missing the required parameter 'ftAddress' when calling fT_0(Async)");
        }
        

        com.squareup.okhttp.Call call = fT_0Call(xChainId, ftAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * FT 컨트랙트 정보 조회
     * 라벨링된 FT 컨트랙트 하나의 정보([FtContractDetail](#section/Common-Types/FtContractDetail))를 반환합니다.  ## Response | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;address&#x60;  | 컨트랙트 주소 (20-byte)  | \&quot;0xdc8c...9dd8\&quot; | string | | &#x60;decimals&#x60;  | 토큰 자릿수  | 8 | number | | &#x60;link&#x60;  | 컨트랙트 고유 정보, 컨트랙트를 대표하는 이미지의 URL &#x60;icon&#x60;과 컨트랙트를 대표하는 웹사이트 URL &#x60;website&#x60; 값을 가짐 | *omitted* | object | | &#x60;name&#x60;  | 컨트랙트 이름  | \&quot;Test Coin\&quot; | string | | &#x60;symbol&#x60;  | 컨트랙트 심볼  | \&quot;TSTC\&quot; | string | | &#x60;totalSupply&#x60;  | 총 발행량 (16진수로 표기) | \&quot;0x174876e800\&quot; | string | | &#x60;type&#x60;  | 컨트랙트 유형 (kip, erc)  | \&quot;kip\&quot; | string | | &#x60;createdAt&#x60;  | 라벨링된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 라벨링 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | | &#x60;deletedAt&#x60;  | 라벨링이 삭제된 시점 (timestamp); 삭제되지 않았을 경우 0  | 0 | number |  
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param ftAddress FT 컨트랙트 주소   (required)
     * @return FtContractDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FtContractDetail fT_0(String xChainId, String ftAddress) throws ApiException {
        ApiResponse<FtContractDetail> resp = fT_0WithHttpInfo(xChainId, ftAddress);
        return resp.getData();
    }

    /**
     * FT 컨트랙트 정보 조회
     * 라벨링된 FT 컨트랙트 하나의 정보([FtContractDetail](#section/Common-Types/FtContractDetail))를 반환합니다.  ## Response | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;address&#x60;  | 컨트랙트 주소 (20-byte)  | \&quot;0xdc8c...9dd8\&quot; | string | | &#x60;decimals&#x60;  | 토큰 자릿수  | 8 | number | | &#x60;link&#x60;  | 컨트랙트 고유 정보, 컨트랙트를 대표하는 이미지의 URL &#x60;icon&#x60;과 컨트랙트를 대표하는 웹사이트 URL &#x60;website&#x60; 값을 가짐 | *omitted* | object | | &#x60;name&#x60;  | 컨트랙트 이름  | \&quot;Test Coin\&quot; | string | | &#x60;symbol&#x60;  | 컨트랙트 심볼  | \&quot;TSTC\&quot; | string | | &#x60;totalSupply&#x60;  | 총 발행량 (16진수로 표기) | \&quot;0x174876e800\&quot; | string | | &#x60;type&#x60;  | 컨트랙트 유형 (kip, erc)  | \&quot;kip\&quot; | string | | &#x60;createdAt&#x60;  | 라벨링된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 라벨링 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | | &#x60;deletedAt&#x60;  | 라벨링이 삭제된 시점 (timestamp); 삭제되지 않았을 경우 0  | 0 | number |  
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param ftAddress FT 컨트랙트 주소   (required)
     * @return ApiResponse&lt;FtContractDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FtContractDetail> fT_0WithHttpInfo(String xChainId, String ftAddress) throws ApiException {
        com.squareup.okhttp.Call call = fT_0ValidateBeforeCall(xChainId, ftAddress, null, null);
        Type localVarReturnType = new TypeToken<FtContractDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * FT 컨트랙트 정보 조회 (asynchronously)
     * 라벨링된 FT 컨트랙트 하나의 정보([FtContractDetail](#section/Common-Types/FtContractDetail))를 반환합니다.  ## Response | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;address&#x60;  | 컨트랙트 주소 (20-byte)  | \&quot;0xdc8c...9dd8\&quot; | string | | &#x60;decimals&#x60;  | 토큰 자릿수  | 8 | number | | &#x60;link&#x60;  | 컨트랙트 고유 정보, 컨트랙트를 대표하는 이미지의 URL &#x60;icon&#x60;과 컨트랙트를 대표하는 웹사이트 URL &#x60;website&#x60; 값을 가짐 | *omitted* | object | | &#x60;name&#x60;  | 컨트랙트 이름  | \&quot;Test Coin\&quot; | string | | &#x60;symbol&#x60;  | 컨트랙트 심볼  | \&quot;TSTC\&quot; | string | | &#x60;totalSupply&#x60;  | 총 발행량 (16진수로 표기) | \&quot;0x174876e800\&quot; | string | | &#x60;type&#x60;  | 컨트랙트 유형 (kip, erc)  | \&quot;kip\&quot; | string | | &#x60;createdAt&#x60;  | 라벨링된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 라벨링 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | | &#x60;deletedAt&#x60;  | 라벨링이 삭제된 시점 (timestamp); 삭제되지 않았을 경우 0  | 0 | number |  
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param ftAddress FT 컨트랙트 주소   (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fT_0Async(String xChainId, String ftAddress, final ApiCallback<FtContractDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fT_0ValidateBeforeCall(xChainId, ftAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FtContractDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nFT
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param status 라벨링 상태 [completed, processing, failed, cancelled] (optional)
     * @param type 컨트랙트 타입 [kip, erc] (optional)
     * @param size 응답 아이템 개수 (optional)
     * @param cursor 응답 오프셋 (pagination)  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nFTCall(String xChainId, String status, String type, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contract/nft";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nFTValidateBeforeCall(String xChainId, String status, String type, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling nFT(Async)");
        }
        

        com.squareup.okhttp.Call call = nFTCall(xChainId, status, type, size, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * NFT 컨트랙트 리스트 조회
     * 라벨링된 NFT 컨트랙트 정보들을 반환합니다.  * [NftContractDetail](#section/Common-Types/NftContractDetail)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NftContractDetail&#x60; 객체 리스트|[NftContractDetail_1, NftContractDetail_2, ...]|array of &#x60;NftContractDetail&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string|  
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param status 라벨링 상태 [completed, processing, failed, cancelled] (optional)
     * @param type 컨트랙트 타입 [kip, erc] (optional)
     * @param size 응답 아이템 개수 (optional)
     * @param cursor 응답 오프셋 (pagination)  (optional)
     * @return PageableNftContractDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableNftContractDetails nFT(String xChainId, String status, String type, Integer size, String cursor) throws ApiException {
        ApiResponse<PageableNftContractDetails> resp = nFTWithHttpInfo(xChainId, status, type, size, cursor);
        return resp.getData();
    }

    /**
     * NFT 컨트랙트 리스트 조회
     * 라벨링된 NFT 컨트랙트 정보들을 반환합니다.  * [NftContractDetail](#section/Common-Types/NftContractDetail)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NftContractDetail&#x60; 객체 리스트|[NftContractDetail_1, NftContractDetail_2, ...]|array of &#x60;NftContractDetail&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string|  
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param status 라벨링 상태 [completed, processing, failed, cancelled] (optional)
     * @param type 컨트랙트 타입 [kip, erc] (optional)
     * @param size 응답 아이템 개수 (optional)
     * @param cursor 응답 오프셋 (pagination)  (optional)
     * @return ApiResponse&lt;PageableNftContractDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableNftContractDetails> nFTWithHttpInfo(String xChainId, String status, String type, Integer size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = nFTValidateBeforeCall(xChainId, status, type, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableNftContractDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * NFT 컨트랙트 리스트 조회 (asynchronously)
     * 라벨링된 NFT 컨트랙트 정보들을 반환합니다.  * [NftContractDetail](#section/Common-Types/NftContractDetail)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NftContractDetail&#x60; 객체 리스트|[NftContractDetail_1, NftContractDetail_2, ...]|array of &#x60;NftContractDetail&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string|  
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param status 라벨링 상태 [completed, processing, failed, cancelled] (optional)
     * @param type 컨트랙트 타입 [kip, erc] (optional)
     * @param size 응답 아이템 개수 (optional)
     * @param cursor 응답 오프셋 (pagination)  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nFTAsync(String xChainId, String status, String type, Integer size, String cursor, final ApiCallback<PageableNftContractDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nFTValidateBeforeCall(xChainId, status, type, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableNftContractDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nFT_0
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nFT_0Call(String xChainId, String nftAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contract/nft/{nftAddress}"
            .replaceAll("\\{" + "nftAddress" + "\\}", apiClient.escapeString(nftAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nFT_0ValidateBeforeCall(String xChainId, String nftAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling nFT_0(Async)");
        }
        
        // verify the required parameter 'nftAddress' is set
        if (nftAddress == null) {
            throw new ApiException("Missing the required parameter 'nftAddress' when calling nFT_0(Async)");
        }
        

        com.squareup.okhttp.Call call = nFT_0Call(xChainId, nftAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * NFT 컨트랙트 정보 조회
     * 라벨링된 NFT 컨트랙트 하나의 정보([NftContractDetail](#section/Common-Types/NftContractDetail))를 반환합니다.  ## Response | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;address&#x60;  | 컨트랙트 주소 (20-byte) | \&quot;0x04a9...446f\&quot; | string | | &#x60;name&#x60;  | 컨트랙트 이름  | \&quot;Test Coin\&quot; | string | | &#x60;symbol&#x60;  | 컨트랙트 심볼  | \&quot;TSTC\&quot; | string | | &#x60;totalSupply&#x60;  | 총 발행량 (16진수로 표기) | \&quot;0x174876e800\&quot; | string | | &#x60;type&#x60;  | 컨트랙트 유형 (kip, erc)  | \&quot;erc\&quot; | string | | &#x60;createdAt&#x60;  | 라벨링된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 라벨링 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | | &#x60;deletedAt&#x60;  | 라벨링이 삭제된 시점 (timestamp); 삭제되지 않았을 경우 0  | 1592180992 | number | 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @return NftContractDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NftContractDetail nFT_0(String xChainId, String nftAddress) throws ApiException {
        ApiResponse<NftContractDetail> resp = nFT_0WithHttpInfo(xChainId, nftAddress);
        return resp.getData();
    }

    /**
     * NFT 컨트랙트 정보 조회
     * 라벨링된 NFT 컨트랙트 하나의 정보([NftContractDetail](#section/Common-Types/NftContractDetail))를 반환합니다.  ## Response | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;address&#x60;  | 컨트랙트 주소 (20-byte) | \&quot;0x04a9...446f\&quot; | string | | &#x60;name&#x60;  | 컨트랙트 이름  | \&quot;Test Coin\&quot; | string | | &#x60;symbol&#x60;  | 컨트랙트 심볼  | \&quot;TSTC\&quot; | string | | &#x60;totalSupply&#x60;  | 총 발행량 (16진수로 표기) | \&quot;0x174876e800\&quot; | string | | &#x60;type&#x60;  | 컨트랙트 유형 (kip, erc)  | \&quot;erc\&quot; | string | | &#x60;createdAt&#x60;  | 라벨링된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 라벨링 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | | &#x60;deletedAt&#x60;  | 라벨링이 삭제된 시점 (timestamp); 삭제되지 않았을 경우 0  | 1592180992 | number | 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @return ApiResponse&lt;NftContractDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NftContractDetail> nFT_0WithHttpInfo(String xChainId, String nftAddress) throws ApiException {
        com.squareup.okhttp.Call call = nFT_0ValidateBeforeCall(xChainId, nftAddress, null, null);
        Type localVarReturnType = new TypeToken<NftContractDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * NFT 컨트랙트 정보 조회 (asynchronously)
     * 라벨링된 NFT 컨트랙트 하나의 정보([NftContractDetail](#section/Common-Types/NftContractDetail))를 반환합니다.  ## Response | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;address&#x60;  | 컨트랙트 주소 (20-byte) | \&quot;0x04a9...446f\&quot; | string | | &#x60;name&#x60;  | 컨트랙트 이름  | \&quot;Test Coin\&quot; | string | | &#x60;symbol&#x60;  | 컨트랙트 심볼  | \&quot;TSTC\&quot; | string | | &#x60;totalSupply&#x60;  | 총 발행량 (16진수로 표기) | \&quot;0x174876e800\&quot; | string | | &#x60;type&#x60;  | 컨트랙트 유형 (kip, erc)  | \&quot;erc\&quot; | string | | &#x60;createdAt&#x60;  | 라벨링된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 라벨링 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | | &#x60;deletedAt&#x60;  | 라벨링이 삭제된 시점 (timestamp); 삭제되지 않았을 경우 0  | 1592180992 | number | 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nFT_0Async(String xChainId, String nftAddress, final ApiCallback<NftContractDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nFT_0ValidateBeforeCall(xChainId, nftAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NftContractDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nFT_1
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nFT_1Call(String xChainId, String nftAddress, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contract/nft/{nftAddress}/token"
            .replaceAll("\\{" + "nftAddress" + "\\}", apiClient.escapeString(nftAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nFT_1ValidateBeforeCall(String xChainId, String nftAddress, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling nFT_1(Async)");
        }
        
        // verify the required parameter 'nftAddress' is set
        if (nftAddress == null) {
            throw new ApiException("Missing the required parameter 'nftAddress' when calling nFT_1(Async)");
        }
        

        com.squareup.okhttp.Call call = nFT_1Call(xChainId, nftAddress, size, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * NFT 리스트 조회
     *  지정된 NFT 컨트랙트가 발행한 모든 NFT들의 정보들을 반환합니다.  * [NFT](#section/Common-Types/NFT)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NFT&#x60; 객체 리스트|[NFT_1, NFT_2, ...]|array of &#x60;NFT&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return PageableNfts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableNfts nFT_1(String xChainId, String nftAddress, Integer size, String cursor) throws ApiException {
        ApiResponse<PageableNfts> resp = nFT_1WithHttpInfo(xChainId, nftAddress, size, cursor);
        return resp.getData();
    }

    /**
     * NFT 리스트 조회
     *  지정된 NFT 컨트랙트가 발행한 모든 NFT들의 정보들을 반환합니다.  * [NFT](#section/Common-Types/NFT)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NFT&#x60; 객체 리스트|[NFT_1, NFT_2, ...]|array of &#x60;NFT&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return ApiResponse&lt;PageableNfts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableNfts> nFT_1WithHttpInfo(String xChainId, String nftAddress, Integer size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = nFT_1ValidateBeforeCall(xChainId, nftAddress, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableNfts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * NFT 리스트 조회 (asynchronously)
     *  지정된 NFT 컨트랙트가 발행한 모든 NFT들의 정보들을 반환합니다.  * [NFT](#section/Common-Types/NFT)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NFT&#x60; 객체 리스트|[NFT_1, NFT_2, ...]|array of &#x60;NFT&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 체인 네트워크 ID (1001 or 8217) (required)
     * @param nftAddress  (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nFT_1Async(String xChainId, String nftAddress, Integer size, String cursor, final ApiCallback<PageableNfts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nFT_1ValidateBeforeCall(xChainId, nftAddress, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableNfts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nFT_2
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param ownerAddress 조회할 EOA 주소 (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nFT_2Call(String xChainId, String nftAddress, String ownerAddress, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contract/nft/{nftAddress}/owner/{ownerAddress}"
            .replaceAll("\\{" + "nftAddress" + "\\}", apiClient.escapeString(nftAddress.toString()))
            .replaceAll("\\{" + "ownerAddress" + "\\}", apiClient.escapeString(ownerAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nFT_2ValidateBeforeCall(String xChainId, String nftAddress, String ownerAddress, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling nFT_2(Async)");
        }
        
        // verify the required parameter 'nftAddress' is set
        if (nftAddress == null) {
            throw new ApiException("Missing the required parameter 'nftAddress' when calling nFT_2(Async)");
        }
        
        // verify the required parameter 'ownerAddress' is set
        if (ownerAddress == null) {
            throw new ApiException("Missing the required parameter 'ownerAddress' when calling nFT_2(Async)");
        }
        

        com.squareup.okhttp.Call call = nFT_2Call(xChainId, nftAddress, ownerAddress, size, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 소유 중인 NFT 리스트 조회
     *  지정된 NFT 컨트랙트가 발행한 NFT들 가운데 특정 EOA가 소유한 토큰들의 정보들을 반환합니다.  * [NFT](#section/Common-Types/NFT)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NFT&#x60; 객체 리스트|[NFT_1, NFT_2, ...]|array of &#x60;NFT&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param ownerAddress 조회할 EOA 주소 (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return PageableNfts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableNfts nFT_2(String xChainId, String nftAddress, String ownerAddress, Integer size, String cursor) throws ApiException {
        ApiResponse<PageableNfts> resp = nFT_2WithHttpInfo(xChainId, nftAddress, ownerAddress, size, cursor);
        return resp.getData();
    }

    /**
     * 소유 중인 NFT 리스트 조회
     *  지정된 NFT 컨트랙트가 발행한 NFT들 가운데 특정 EOA가 소유한 토큰들의 정보들을 반환합니다.  * [NFT](#section/Common-Types/NFT)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NFT&#x60; 객체 리스트|[NFT_1, NFT_2, ...]|array of &#x60;NFT&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param ownerAddress 조회할 EOA 주소 (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return ApiResponse&lt;PageableNfts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableNfts> nFT_2WithHttpInfo(String xChainId, String nftAddress, String ownerAddress, Integer size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = nFT_2ValidateBeforeCall(xChainId, nftAddress, ownerAddress, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableNfts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 소유 중인 NFT 리스트 조회 (asynchronously)
     *  지정된 NFT 컨트랙트가 발행한 NFT들 가운데 특정 EOA가 소유한 토큰들의 정보들을 반환합니다.  * [NFT](#section/Common-Types/NFT)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NFT&#x60; 객체 리스트|[NFT_1, NFT_2, ...]|array of &#x60;NFT&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param ownerAddress 조회할 EOA 주소 (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nFT_2Async(String xChainId, String nftAddress, String ownerAddress, Integer size, String cursor, final ApiCallback<PageableNfts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nFT_2ValidateBeforeCall(xChainId, nftAddress, ownerAddress, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableNfts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nFT_3
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param tokenId NFT ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nFT_3Call(String xChainId, String nftAddress, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contract/nft/{nftAddress}/token/{tokenId}"
            .replaceAll("\\{" + "nftAddress" + "\\}", apiClient.escapeString(nftAddress.toString()))
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nFT_3ValidateBeforeCall(String xChainId, String nftAddress, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling nFT_3(Async)");
        }
        
        // verify the required parameter 'nftAddress' is set
        if (nftAddress == null) {
            throw new ApiException("Missing the required parameter 'nftAddress' when calling nFT_3(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling nFT_3(Async)");
        }
        

        com.squareup.okhttp.Call call = nFT_3Call(xChainId, nftAddress, tokenId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * NFT 정보 조회
     *  특정 NFT의 정보([NFT](#section/Common-Types/NFT))를 반환합니다.  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;owner&#x60;  | 소유자 EOA 주소 (20-byte) | \&quot;0x3926...1f5a\&quot; | string | | &#x60;previousOwner&#x60;  | 직전 소유자 EOA 주소 (20-byte)  | \&quot;0x09d9...776f\&quot; | string | | &#x60;tokenId&#x60;  | 토큰 ID (16진수) | \&quot;0x1\&quot; | string | | &#x60;tokenUri&#x60;  | 토큰 고유의 URL  | \&quot;https://link.to/token.json\&quot; | string | | &#x60;transactionHash&#x60;  | 마지막 트랜잭션 해시 (32-byte) | \&quot;0x13f3...30b0\&quot; | string | | &#x60;createdAt&#x60;  | 토큰이 생성된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 토큰 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param tokenId NFT ID (required)
     * @return Nft
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Nft nFT_3(String xChainId, String nftAddress, String tokenId) throws ApiException {
        ApiResponse<Nft> resp = nFT_3WithHttpInfo(xChainId, nftAddress, tokenId);
        return resp.getData();
    }

    /**
     * NFT 정보 조회
     *  특정 NFT의 정보([NFT](#section/Common-Types/NFT))를 반환합니다.  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;owner&#x60;  | 소유자 EOA 주소 (20-byte) | \&quot;0x3926...1f5a\&quot; | string | | &#x60;previousOwner&#x60;  | 직전 소유자 EOA 주소 (20-byte)  | \&quot;0x09d9...776f\&quot; | string | | &#x60;tokenId&#x60;  | 토큰 ID (16진수) | \&quot;0x1\&quot; | string | | &#x60;tokenUri&#x60;  | 토큰 고유의 URL  | \&quot;https://link.to/token.json\&quot; | string | | &#x60;transactionHash&#x60;  | 마지막 트랜잭션 해시 (32-byte) | \&quot;0x13f3...30b0\&quot; | string | | &#x60;createdAt&#x60;  | 토큰이 생성된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 토큰 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param tokenId NFT ID (required)
     * @return ApiResponse&lt;Nft&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Nft> nFT_3WithHttpInfo(String xChainId, String nftAddress, String tokenId) throws ApiException {
        com.squareup.okhttp.Call call = nFT_3ValidateBeforeCall(xChainId, nftAddress, tokenId, null, null);
        Type localVarReturnType = new TypeToken<Nft>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * NFT 정보 조회 (asynchronously)
     *  특정 NFT의 정보([NFT](#section/Common-Types/NFT))를 반환합니다.  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| | &#x60;owner&#x60;  | 소유자 EOA 주소 (20-byte) | \&quot;0x3926...1f5a\&quot; | string | | &#x60;previousOwner&#x60;  | 직전 소유자 EOA 주소 (20-byte)  | \&quot;0x09d9...776f\&quot; | string | | &#x60;tokenId&#x60;  | 토큰 ID (16진수) | \&quot;0x1\&quot; | string | | &#x60;tokenUri&#x60;  | 토큰 고유의 URL  | \&quot;https://link.to/token.json\&quot; | string | | &#x60;transactionHash&#x60;  | 마지막 트랜잭션 해시 (32-byte) | \&quot;0x13f3...30b0\&quot; | string | | &#x60;createdAt&#x60;  | 토큰이 생성된 시점 (timestamp)  | 1592180992 | number | | &#x60;updatedAt&#x60;  | 토큰 정보가 마지막으로 변경된 시점 (timestamp)  | 1592180992 | number | 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param tokenId NFT ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nFT_3Async(String xChainId, String nftAddress, String tokenId, final ApiCallback<Nft> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nFT_3ValidateBeforeCall(xChainId, nftAddress, tokenId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Nft>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nFT_4
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param tokenId NFT ID (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nFT_4Call(String xChainId, String nftAddress, String tokenId, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/contract/nft/{nftAddress}/token/{tokenId}/history"
            .replaceAll("\\{" + "nftAddress" + "\\}", apiClient.escapeString(nftAddress.toString()))
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nFT_4ValidateBeforeCall(String xChainId, String nftAddress, String tokenId, Integer size, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling nFT_4(Async)");
        }
        
        // verify the required parameter 'nftAddress' is set
        if (nftAddress == null) {
            throw new ApiException("Missing the required parameter 'nftAddress' when calling nFT_4(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling nFT_4(Async)");
        }
        

        com.squareup.okhttp.Call call = nFT_4Call(xChainId, nftAddress, tokenId, size, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * NFT 소유권 이력 조회
     * 특정 NFT의 소유권 변경 이력을 조회합니다.  * [NftOwnershipChange](#section/Common-Types/NftOwnershipChange)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NftOwnershipChange&#x60; 객체 리스트|[NftOwnershipChange_1, ...]|array of &#x60;NftOwnershipChange&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param tokenId NFT ID (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return PageableNftOwnershipChanges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableNftOwnershipChanges nFT_4(String xChainId, String nftAddress, String tokenId, Integer size, String cursor) throws ApiException {
        ApiResponse<PageableNftOwnershipChanges> resp = nFT_4WithHttpInfo(xChainId, nftAddress, tokenId, size, cursor);
        return resp.getData();
    }

    /**
     * NFT 소유권 이력 조회
     * 특정 NFT의 소유권 변경 이력을 조회합니다.  * [NftOwnershipChange](#section/Common-Types/NftOwnershipChange)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NftOwnershipChange&#x60; 객체 리스트|[NftOwnershipChange_1, ...]|array of &#x60;NftOwnershipChange&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param tokenId NFT ID (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @return ApiResponse&lt;PageableNftOwnershipChanges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableNftOwnershipChanges> nFT_4WithHttpInfo(String xChainId, String nftAddress, String tokenId, Integer size, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = nFT_4ValidateBeforeCall(xChainId, nftAddress, tokenId, size, cursor, null, null);
        Type localVarReturnType = new TypeToken<PageableNftOwnershipChanges>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * NFT 소유권 이력 조회 (asynchronously)
     * 특정 NFT의 소유권 변경 이력을 조회합니다.  * [NftOwnershipChange](#section/Common-Types/NftOwnershipChange)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;NftOwnershipChange&#x60; 객체 리스트|[NftOwnershipChange_1, ...]|array of &#x60;NftOwnershipChange&#x60;| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param nftAddress NFT 컨트랙트 주소 (required)
     * @param tokenId NFT ID (required)
     * @param size 응답 아이템 개수(min&#x3D;1, max&#x3D;10000, default&#x3D;100) (optional)
     * @param cursor 특정 위치를 지정하기 위한 오프셋 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nFT_4Async(String xChainId, String nftAddress, String tokenId, Integer size, String cursor, final ApiCallback<PageableNftOwnershipChanges> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nFT_4ValidateBeforeCall(xChainId, nftAddress, tokenId, size, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableNftOwnershipChanges>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transfer
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param xResource 조회에 사용할 Preset이 등록된 Preset Pool 정보 (optional)
     * @param kind [“klay”, “ft”, “nft”] 중 포함 할 유형, 지정안될 경우 모든 유형을 조회  (optional)
     * @param range 조회 범위 지정 (블록번호 또는 Unix time) (optional)
     * @param size 응답 아이템 개수 (optional)
     * @param cursor 응답 오프셋 (optional)
     * @param preset 검색에 사용할 프리셋, 프리셋은 EOA, FT/NFT 컨트랙트 주소들을 저장, 프리셋을 사용할 경우 해당 프리셋이 저장된 프리셋 풀 (Preset Pool)을 x-resource를 필수 입력  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferCall(String xChainId, String xResource, String kind, String range, Integer size, String cursor, Integer preset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (kind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kind", kind));
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("range", range));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (preset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("presets", preset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xResource != null)
        localVarHeaderParams.put("x-resource", apiClient.parameterToString(xResource));
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferValidateBeforeCall(String xChainId, String xResource, String kind, String range, Integer size, String cursor, Integer preset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling transfer(Async)");
        }
        

        com.squareup.okhttp.Call call = transferCall(xChainId, xResource, kind, range, size, cursor, preset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 통합 Transfer 리스트 조회
     * 거래내역을 통합 조회합니다.   * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## 거래유형  * &#x60;kind&#x60; 파라메터를 설정하여 여러 유형의 거래내역을 조회할 수 있습니다 * &#x60;kind&#x60;가 설정되지 않으면 모든 유형의 거래내역이 조회됩니다  ## 조회기간  * &#x60;range&#x60;의 경우 &#x60;range&#x3D;{from},{to}&#x60; 포맷으로 질의합니다 * &#x60;{from}&#x60;과 &#x60;{to}&#x60;가 정수일 경우 Unix time으로, 16진수 문자열일 경우 블록 번호로 간주합니다 * &#x60;{to}&#x60;값이 없는 경우 현재 시간 또는 최신 블록 번호가 사용됩니다   ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;Transfer&#x60; 객체 리스트|[Transfer_1, Transfer_2, ...]|array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;]| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param xResource 조회에 사용할 Preset이 등록된 Preset Pool 정보 (optional)
     * @param kind [“klay”, “ft”, “nft”] 중 포함 할 유형, 지정안될 경우 모든 유형을 조회  (optional)
     * @param range 조회 범위 지정 (블록번호 또는 Unix time) (optional)
     * @param size 응답 아이템 개수 (optional)
     * @param cursor 응답 오프셋 (optional)
     * @param preset 검색에 사용할 프리셋, 프리셋은 EOA, FT/NFT 컨트랙트 주소들을 저장, 프리셋을 사용할 경우 해당 프리셋이 저장된 프리셋 풀 (Preset Pool)을 x-resource를 필수 입력  (optional)
     * @return PageableTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableTransfers transfer(String xChainId, String xResource, String kind, String range, Integer size, String cursor, Integer preset) throws ApiException {
        ApiResponse<PageableTransfers> resp = transferWithHttpInfo(xChainId, xResource, kind, range, size, cursor, preset);
        return resp.getData();
    }

    /**
     * 통합 Transfer 리스트 조회
     * 거래내역을 통합 조회합니다.   * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## 거래유형  * &#x60;kind&#x60; 파라메터를 설정하여 여러 유형의 거래내역을 조회할 수 있습니다 * &#x60;kind&#x60;가 설정되지 않으면 모든 유형의 거래내역이 조회됩니다  ## 조회기간  * &#x60;range&#x60;의 경우 &#x60;range&#x3D;{from},{to}&#x60; 포맷으로 질의합니다 * &#x60;{from}&#x60;과 &#x60;{to}&#x60;가 정수일 경우 Unix time으로, 16진수 문자열일 경우 블록 번호로 간주합니다 * &#x60;{to}&#x60;값이 없는 경우 현재 시간 또는 최신 블록 번호가 사용됩니다   ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;Transfer&#x60; 객체 리스트|[Transfer_1, Transfer_2, ...]|array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;]| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param xResource 조회에 사용할 Preset이 등록된 Preset Pool 정보 (optional)
     * @param kind [“klay”, “ft”, “nft”] 중 포함 할 유형, 지정안될 경우 모든 유형을 조회  (optional)
     * @param range 조회 범위 지정 (블록번호 또는 Unix time) (optional)
     * @param size 응답 아이템 개수 (optional)
     * @param cursor 응답 오프셋 (optional)
     * @param preset 검색에 사용할 프리셋, 프리셋은 EOA, FT/NFT 컨트랙트 주소들을 저장, 프리셋을 사용할 경우 해당 프리셋이 저장된 프리셋 풀 (Preset Pool)을 x-resource를 필수 입력  (optional)
     * @return ApiResponse&lt;PageableTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableTransfers> transferWithHttpInfo(String xChainId, String xResource, String kind, String range, Integer size, String cursor, Integer preset) throws ApiException {
        com.squareup.okhttp.Call call = transferValidateBeforeCall(xChainId, xResource, kind, range, size, cursor, preset, null, null);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 통합 Transfer 리스트 조회 (asynchronously)
     * 거래내역을 통합 조회합니다.   * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## 거래유형  * &#x60;kind&#x60; 파라메터를 설정하여 여러 유형의 거래내역을 조회할 수 있습니다 * &#x60;kind&#x60;가 설정되지 않으면 모든 유형의 거래내역이 조회됩니다  ## 조회기간  * &#x60;range&#x60;의 경우 &#x60;range&#x3D;{from},{to}&#x60; 포맷으로 질의합니다 * &#x60;{from}&#x60;과 &#x60;{to}&#x60;가 정수일 경우 Unix time으로, 16진수 문자열일 경우 블록 번호로 간주합니다 * &#x60;{to}&#x60;값이 없는 경우 현재 시간 또는 최신 블록 번호가 사용됩니다   ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;Transfer&#x60; 객체 리스트|[Transfer_1, Transfer_2, ...]|array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;]| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param xResource 조회에 사용할 Preset이 등록된 Preset Pool 정보 (optional)
     * @param kind [“klay”, “ft”, “nft”] 중 포함 할 유형, 지정안될 경우 모든 유형을 조회  (optional)
     * @param range 조회 범위 지정 (블록번호 또는 Unix time) (optional)
     * @param size 응답 아이템 개수 (optional)
     * @param cursor 응답 오프셋 (optional)
     * @param preset 검색에 사용할 프리셋, 프리셋은 EOA, FT/NFT 컨트랙트 주소들을 저장, 프리셋을 사용할 경우 해당 프리셋이 저장된 프리셋 풀 (Preset Pool)을 x-resource를 필수 입력  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferAsync(String xChainId, String xResource, String kind, String range, Integer size, String cursor, Integer preset, final ApiCallback<PageableTransfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferValidateBeforeCall(xChainId, xResource, kind, range, size, cursor, preset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for txhashTransfer
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param txHash 조회할 트랜잭션 해시 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call txhashTransferCall(String xChainId, String txHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transfer/txhash/{txHash}"
            .replaceAll("\\{" + "txHash" + "\\}", apiClient.escapeString(txHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChainId != null)
        localVarHeaderParams.put("x-chain-id", apiClient.parameterToString(xChainId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call txhashTransferValidateBeforeCall(String xChainId, String txHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChainId' is set
        if (xChainId == null) {
            throw new ApiException("Missing the required parameter 'xChainId' when calling txhashTransfer(Async)");
        }
        
        // verify the required parameter 'txHash' is set
        if (txHash == null) {
            throw new ApiException("Missing the required parameter 'txHash' when calling txhashTransfer(Async)");
        }
        

        com.squareup.okhttp.Call call = txhashTransferCall(xChainId, txHash, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Tx hash로 통합 Transfer 리스트 조회
     * TX 해시를 기준으로 거래내역을 조회합니다.   * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;Transfer&#x60; 객체 리스트|[Transfer_1, Transfer_2, ...]|array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;]| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param txHash 조회할 트랜잭션 해시 (required)
     * @return PageableTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageableTransfers txhashTransfer(String xChainId, String txHash) throws ApiException {
        ApiResponse<PageableTransfers> resp = txhashTransferWithHttpInfo(xChainId, txHash);
        return resp.getData();
    }

    /**
     * Tx hash로 통합 Transfer 리스트 조회
     * TX 해시를 기준으로 거래내역을 조회합니다.   * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;Transfer&#x60; 객체 리스트|[Transfer_1, Transfer_2, ...]|array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;]| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param txHash 조회할 트랜잭션 해시 (required)
     * @return ApiResponse&lt;PageableTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageableTransfers> txhashTransferWithHttpInfo(String xChainId, String txHash) throws ApiException {
        com.squareup.okhttp.Call call = txhashTransferValidateBeforeCall(xChainId, txHash, null, null);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Tx hash로 통합 Transfer 리스트 조회 (asynchronously)
     * TX 해시를 기준으로 거래내역을 조회합니다.   * [KlayTransfer](#section/Common-Types/KlayTransfer) * [FtTransfer](#section/Common-Types/FtTransfer) * [NftTransfer](#section/Common-Types/NftTransfer)  ## Response  | Field Name | Description | Example | Type | |------------|-------------|---------|------| |&#x60;items&#x60;|&#x60;Transfer&#x60; 객체 리스트|[Transfer_1, Transfer_2, ...]|array of [&#x60;KlayTransfer&#x60;, &#x60;FtTransfer&#x60;, &#x60;NftTransfer&#x60;]| |&#x60;nextCursor&#x60;|다음 요청에 사용할 오프셋|*omitted*|string| 
     * @param xChainId (required) Klaytn 네트워크 체인 ID (1001 or 8217) (required)
     * @param txHash 조회할 트랜잭션 해시 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call txhashTransferAsync(String xChainId, String txHash, final ApiCallback<PageableTransfers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = txhashTransferValidateBeforeCall(xChainId, txHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageableTransfers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
