buildscript {
    ext.caverVersion = '1.5.3-rc.2'
}

plugins {
    id 'java'

    id "com.jfrog.bintray" version "1.8.4"
    id 'maven-publish'
    id 'signing'
    id 'idea'
}

allprojects {
    version '1.0.0'
    group 'com.groundx.caver'
    description 'caver-java-ext-kas project'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

configure(project(':core')) {
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    // Deploy
    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

//    task testJar(type: Jar) {
//        classifier = 'tests'
//        from sourceSets.test.output
//    }

//    artifacts {
//        archives sourcesJar, javadocJar
//    }

    ext {
        ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
        ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
        ossrhRepoUrl = project.hasProperty('ossrhRepoUrl') ? project.property('ossrhRepoUrl') : System.getenv('OSSRH_REPO_URL')
        bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        bintrayKey = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_KEY')
        bintrayGpgPassphrase = project.hasProperty('bintrayGpgPassphrase') ? project.property('bintrayGpgPassphrase') : System.getenv('BINTRAY_GPG_PASSPHRASE')
        isSnapshotVersion = project.version.endsWith("-SNAPSHOT")
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

//                artifact testJar {
//                    classifier 'tests'
//                }

                pom {
                    name = project.name
                    description = project.description
                    version = project.version
                    url = "https://"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = "groundxDev"
                            name = "caver-java-ext-kas Authors"
                            email = "developer@groundx.xyz"
                        }
                    }
                    scm {
                        connection = "scm:git:https://*.git"
                        developerConnection = "scm:git://*.git"
                        url = "https://*.git"
                    }
                }
            }
        }
    }

    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['mavenJava']
        publish = false
        pkg {
            desc = project.description
            repo = 'maven'
            name = 'caver-java-ext-kas'
            userOrg = 'ground-x'
            licenses = ['Apache-2.0']
            issueTrackerUrl = 'https://*'
            vcsUrl = 'https://*.git'
            websiteUrl = 'https://docs.klaytn.com'
            publicDownloadNumbers = true

            version {
                name = project.version
                desc = project.description
                gpg {
                    sign = true
                    passphrase = bintrayGpgPassphrase
                }
//                mavenCentralSync {
//                    sync = false
//                    user = ossrhUsername
//                    password = ossrhPassword
//                    close = '1'
//                }
            }
        }
    }

    task release {
        dependsOn 'build'

        doLast {
//            if (!ossrhUsername || !ossrhPassword || !ossrhRepoUrl) {
//                throw new InvalidUserDataException("Required parameters missing:  'ossrhUsername', 'ossrhPassword', 'ossrhRepoUrl'")
//            }
            if (!bintrayUser || !bintrayKey || !bintrayGpgPassphrase) {
                throw new InvalidUserDataException("Required parameters missing:  'bintrayUser', 'bintrayKey', 'bintrayGpgPassphrase'")
            }
//            logger.lifecycle(" - ossrhUsername={}", ossrhUsername)
//            logger.lifecycle(" - ossrhPassword={}", ossrhPassword ? "provided" : "not_provided")
//            logger.lifecycle(" - ossrhRepoUrl={}", ossrhRepoUrl)
            logger.lifecycle(" - bintrayUser={}", bintrayUser)
            logger.lifecycle(" - bintrayKey={}", bintrayKey ? "provided" : "not_provided")
            logger.lifecycle(" - bintrayGpgPassphrase={}", bintrayGpgPassphrase ? "provided" : "not_provided")
        }

        dependsOn 'bintrayUpload'
        tasks.findByName('bintrayUpload').mustRunAfter 'build'
    }
}
